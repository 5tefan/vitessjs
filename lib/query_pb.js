/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var topodata_pb = require('./topodata_pb.js');
var vtrpc_pb = require('./vtrpc_pb.js');
goog.exportSymbol('proto.query.BeginExecuteBatchRequest', null, global);
goog.exportSymbol('proto.query.BeginExecuteBatchResponse', null, global);
goog.exportSymbol('proto.query.BeginExecuteRequest', null, global);
goog.exportSymbol('proto.query.BeginExecuteResponse', null, global);
goog.exportSymbol('proto.query.BeginRequest', null, global);
goog.exportSymbol('proto.query.BeginResponse', null, global);
goog.exportSymbol('proto.query.BindVariable', null, global);
goog.exportSymbol('proto.query.BoundQuery', null, global);
goog.exportSymbol('proto.query.CommitRequest', null, global);
goog.exportSymbol('proto.query.CommitResponse', null, global);
goog.exportSymbol('proto.query.ExecuteBatchRequest', null, global);
goog.exportSymbol('proto.query.ExecuteBatchResponse', null, global);
goog.exportSymbol('proto.query.ExecuteRequest', null, global);
goog.exportSymbol('proto.query.ExecuteResponse', null, global);
goog.exportSymbol('proto.query.Field', null, global);
goog.exportSymbol('proto.query.Flag', null, global);
goog.exportSymbol('proto.query.QueryResult', null, global);
goog.exportSymbol('proto.query.QuerySplit', null, global);
goog.exportSymbol('proto.query.RealtimeStats', null, global);
goog.exportSymbol('proto.query.RollbackRequest', null, global);
goog.exportSymbol('proto.query.RollbackResponse', null, global);
goog.exportSymbol('proto.query.Row', null, global);
goog.exportSymbol('proto.query.SplitQueryRequest', null, global);
goog.exportSymbol('proto.query.SplitQueryRequest.Algorithm', null, global);
goog.exportSymbol('proto.query.SplitQueryResponse', null, global);
goog.exportSymbol('proto.query.StreamExecuteRequest', null, global);
goog.exportSymbol('proto.query.StreamExecuteResponse', null, global);
goog.exportSymbol('proto.query.StreamHealthRequest', null, global);
goog.exportSymbol('proto.query.StreamHealthResponse', null, global);
goog.exportSymbol('proto.query.Target', null, global);
goog.exportSymbol('proto.query.Type', null, global);
goog.exportSymbol('proto.query.VTGateCallerID', null, global);
goog.exportSymbol('proto.query.Value', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.Target = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.Target, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.Target.displayName = 'proto.query.Target';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.Target.prototype.toObject = function(opt_includeInstance) {
  return proto.query.Target.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.Target} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.Target.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shard: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tabletType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.Target}
 */
proto.query.Target.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.Target;
  return proto.query.Target.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.Target} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.Target}
 */
proto.query.Target.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShard(value);
      break;
    case 3:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.Target} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Target.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.Target.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Target.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getShard();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string keyspace = 1;
 * @return {string}
 */
proto.query.Target.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.query.Target.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string shard = 2;
 * @return {string}
 */
proto.query.Target.prototype.getShard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.query.Target.prototype.setShard = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional topodata.TabletType tablet_type = 3;
 * @return {!proto.topodata.TabletType}
 */
proto.query.Target.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.query.Target.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.VTGateCallerID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.VTGateCallerID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.VTGateCallerID.displayName = 'proto.query.VTGateCallerID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.VTGateCallerID.prototype.toObject = function(opt_includeInstance) {
  return proto.query.VTGateCallerID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.VTGateCallerID} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.VTGateCallerID.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.VTGateCallerID}
 */
proto.query.VTGateCallerID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.VTGateCallerID;
  return proto.query.VTGateCallerID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.VTGateCallerID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.VTGateCallerID}
 */
proto.query.VTGateCallerID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.VTGateCallerID} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.VTGateCallerID.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.VTGateCallerID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.VTGateCallerID.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.query.VTGateCallerID.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.query.VTGateCallerID.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.Value.displayName = 'proto.query.Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.query.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.Value} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.Value}
 */
proto.query.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.Value;
  return proto.query.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.Value}
 */
proto.query.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.query.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.Value} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Value.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Value.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.query.Type}
 */
proto.query.Value.prototype.getType = function() {
  return /** @type {!proto.query.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.query.Type} value */
proto.query.Value.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.query.Value.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.query.Value.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.query.Value.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.query.Value.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BindVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.BindVariable.repeatedFields_, null);
};
goog.inherits(proto.query.BindVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BindVariable.displayName = 'proto.query.BindVariable';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.BindVariable.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BindVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BindVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BindVariable} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BindVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64(),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.query.Value.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BindVariable}
 */
proto.query.BindVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BindVariable;
  return proto.query.BindVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BindVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BindVariable}
 */
proto.query.BindVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.query.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.query.Value;
      reader.readMessage(value,proto.query.Value.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BindVariable} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BindVariable.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BindVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BindVariable.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.query.Value.serializeBinaryToWriter
    );
  }
};


/**
 * optional Type type = 1;
 * @return {!proto.query.Type}
 */
proto.query.BindVariable.prototype.getType = function() {
  return /** @type {!proto.query.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.query.Type} value */
proto.query.BindVariable.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.query.BindVariable.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.query.BindVariable.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.query.BindVariable.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.query.BindVariable.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Value values = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.Value>}
 */
proto.query.BindVariable.prototype.getValuesList = function() {
  return /** @type{!Array.<!proto.query.Value>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.Value, 3));
};


/** @param {!Array.<!proto.query.Value>} value */
proto.query.BindVariable.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.query.Value=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.Value}
 */
proto.query.BindVariable.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.query.Value, opt_index);
};


proto.query.BindVariable.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BoundQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.BoundQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BoundQuery.displayName = 'proto.query.BoundQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BoundQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BoundQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BoundQuery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BoundQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    sql: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bindVariablesMap: (f = msg.getBindVariablesMap()) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BoundQuery}
 */
proto.query.BoundQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BoundQuery;
  return proto.query.BoundQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BoundQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BoundQuery}
 */
proto.query.BoundQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    case 2:
      var value = msg.getBindVariablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.query.BindVariable.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BoundQuery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BoundQuery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BoundQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BoundQuery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSql();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBindVariablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.query.BindVariable.serializeBinaryToWriter);
  }
};


/**
 * optional string sql = 1;
 * @return {string}
 */
proto.query.BoundQuery.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.query.BoundQuery.prototype.setSql = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, BindVariable> bind_variables = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.query.BindVariable>}
 */
proto.query.BoundQuery.prototype.getBindVariablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.query.BindVariable>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.query.BindVariable));
};


proto.query.BoundQuery.prototype.clearBindVariablesMap = function() {
  this.getBindVariablesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.Field.displayName = 'proto.query.Field';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.query.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.Field} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.Field}
 */
proto.query.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.Field;
  return proto.query.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.Field}
 */
proto.query.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.query.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.Field} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Field.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Field.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.query.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.query.Field.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.query.Type}
 */
proto.query.Field.prototype.getType = function() {
  return /** @type {!proto.query.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.query.Type} value */
proto.query.Field.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.Row = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.Row.repeatedFields_, null);
};
goog.inherits(proto.query.Row, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.Row.displayName = 'proto.query.Row';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.Row.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.Row.prototype.toObject = function(opt_includeInstance) {
  return proto.query.Row.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.Row} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.Row.toObject = function(includeInstance, msg) {
  var f, obj = {
    lengthsList: jspb.Message.getField(msg, 1),
    values: msg.getValues_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.Row}
 */
proto.query.Row.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.Row;
  return proto.query.Row.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.Row} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.Row}
 */
proto.query.Row.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedSint64());
      msg.setLengthsList(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.Row} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Row.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.Row.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.Row.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLengthsList();
  if (f.length > 0) {
    writer.writePackedSint64(
      1,
      f
    );
  }
  f = this.getValues_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated sint64 lengths = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.query.Row.prototype.getLengthsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<number>} value */
proto.query.Row.prototype.setLengthsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.query.Row.prototype.addLengths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.query.Row.prototype.clearLengthsList = function() {
  this.setLengthsList([]);
};


/**
 * optional bytes values = 2;
 * @return {!(string|Uint8Array)}
 */
proto.query.Row.prototype.getValues = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes values = 2;
 * This is a type-conversion wrapper around `getValues()`
 * @return {string}
 */
proto.query.Row.prototype.getValues_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValues()));
};


/**
 * optional bytes values = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValues()`
 * @return {!Uint8Array}
 */
proto.query.Row.prototype.getValues_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValues()));
};


/** @param {!(string|Uint8Array)} value */
proto.query.Row.prototype.setValues = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.QueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.QueryResult.repeatedFields_, null);
};
goog.inherits(proto.query.QueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.QueryResult.displayName = 'proto.query.QueryResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.QueryResult.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.QueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.query.QueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.QueryResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.QueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.query.Field.toObject, includeInstance),
    rowsAffected: jspb.Message.getFieldWithDefault(msg, 2, 0),
    insertId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.query.Row.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.QueryResult}
 */
proto.query.QueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.QueryResult;
  return proto.query.QueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.QueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.QueryResult}
 */
proto.query.QueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.Field;
      reader.readMessage(value,proto.query.Field.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRowsAffected(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInsertId(value);
      break;
    case 4:
      var value = new proto.query.Row;
      reader.readMessage(value,proto.query.Row.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.QueryResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.QueryResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.QueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.QueryResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.query.Field.serializeBinaryToWriter
    );
  }
  f = this.getRowsAffected();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = this.getInsertId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = this.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.query.Row.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Field fields = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.Field>}
 */
proto.query.QueryResult.prototype.getFieldsList = function() {
  return /** @type{!Array.<!proto.query.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.Field, 1));
};


/** @param {!Array.<!proto.query.Field>} value */
proto.query.QueryResult.prototype.setFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.query.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.Field}
 */
proto.query.QueryResult.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.query.Field, opt_index);
};


proto.query.QueryResult.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * optional uint64 rows_affected = 2;
 * @return {number}
 */
proto.query.QueryResult.prototype.getRowsAffected = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.query.QueryResult.prototype.setRowsAffected = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 insert_id = 3;
 * @return {number}
 */
proto.query.QueryResult.prototype.getInsertId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.query.QueryResult.prototype.setInsertId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated Row rows = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.Row>}
 */
proto.query.QueryResult.prototype.getRowsList = function() {
  return /** @type{!Array.<!proto.query.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.Row, 4));
};


/** @param {!Array.<!proto.query.Row>} value */
proto.query.QueryResult.prototype.setRowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.query.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.Row}
 */
proto.query.QueryResult.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.query.Row, opt_index);
};


proto.query.QueryResult.prototype.clearRowsList = function() {
  this.setRowsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.ExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.ExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.ExecuteRequest.displayName = 'proto.query.ExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.ExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.ExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.ExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.ExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.query.BoundQuery.toObject(includeInstance, f),
    transactionId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.ExecuteRequest}
 */
proto.query.ExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.ExecuteRequest;
  return proto.query.ExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.ExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.ExecuteRequest}
 */
proto.query.ExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.ExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.ExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.ExecuteRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.ExecuteRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.ExecuteRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.ExecuteRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.ExecuteRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.ExecuteRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.ExecuteRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.ExecuteRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.ExecuteRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BoundQuery query = 4;
 * @return {?proto.query.BoundQuery}
 */
proto.query.ExecuteRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, proto.query.BoundQuery, 4));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.query.ExecuteRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.query.ExecuteRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 transaction_id = 5;
 * @return {number}
 */
proto.query.ExecuteRequest.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.query.ExecuteRequest.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.ExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.ExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.ExecuteResponse.displayName = 'proto.query.ExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.ExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.ExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.ExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.ExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.query.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.ExecuteResponse}
 */
proto.query.ExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.ExecuteResponse;
  return proto.query.ExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.ExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.ExecuteResponse}
 */
proto.query.ExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.QueryResult;
      reader.readMessage(value,proto.query.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.ExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.ExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.query.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional QueryResult result = 1;
 * @return {?proto.query.QueryResult}
 */
proto.query.ExecuteResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, proto.query.QueryResult, 1));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.query.ExecuteResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.ExecuteResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.ExecuteBatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.ExecuteBatchRequest.repeatedFields_, null);
};
goog.inherits(proto.query.ExecuteBatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.ExecuteBatchRequest.displayName = 'proto.query.ExecuteBatchRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.ExecuteBatchRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.ExecuteBatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.ExecuteBatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.ExecuteBatchRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.ExecuteBatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.query.BoundQuery.toObject, includeInstance),
    asTransaction: jspb.Message.getFieldWithDefault(msg, 5, false),
    transactionId: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.ExecuteBatchRequest}
 */
proto.query.ExecuteBatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.ExecuteBatchRequest;
  return proto.query.ExecuteBatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.ExecuteBatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.ExecuteBatchRequest}
 */
proto.query.ExecuteBatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsTransaction(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.ExecuteBatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteBatchRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.ExecuteBatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteBatchRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getAsTransaction();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.ExecuteBatchRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.ExecuteBatchRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.ExecuteBatchRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteBatchRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.ExecuteBatchRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.ExecuteBatchRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.ExecuteBatchRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteBatchRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.ExecuteBatchRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.ExecuteBatchRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.ExecuteBatchRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.ExecuteBatchRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated BoundQuery queries = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.BoundQuery>}
 */
proto.query.ExecuteBatchRequest.prototype.getQueriesList = function() {
  return /** @type{!Array.<!proto.query.BoundQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.BoundQuery, 4));
};


/** @param {!Array.<!proto.query.BoundQuery>} value */
proto.query.ExecuteBatchRequest.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.query.BoundQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.BoundQuery}
 */
proto.query.ExecuteBatchRequest.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.query.BoundQuery, opt_index);
};


proto.query.ExecuteBatchRequest.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};


/**
 * optional bool as_transaction = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.query.ExecuteBatchRequest.prototype.getAsTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.query.ExecuteBatchRequest.prototype.setAsTransaction = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 transaction_id = 6;
 * @return {number}
 */
proto.query.ExecuteBatchRequest.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.query.ExecuteBatchRequest.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.ExecuteBatchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.ExecuteBatchResponse.repeatedFields_, null);
};
goog.inherits(proto.query.ExecuteBatchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.ExecuteBatchResponse.displayName = 'proto.query.ExecuteBatchResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.ExecuteBatchResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.ExecuteBatchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.ExecuteBatchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.ExecuteBatchResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.ExecuteBatchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.query.QueryResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.ExecuteBatchResponse}
 */
proto.query.ExecuteBatchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.ExecuteBatchResponse;
  return proto.query.ExecuteBatchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.ExecuteBatchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.ExecuteBatchResponse}
 */
proto.query.ExecuteBatchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.QueryResult;
      reader.readMessage(value,proto.query.QueryResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.ExecuteBatchResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteBatchResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.ExecuteBatchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.ExecuteBatchResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.query.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QueryResult results = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.QueryResult>}
 */
proto.query.ExecuteBatchResponse.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.query.QueryResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.QueryResult, 1));
};


/** @param {!Array.<!proto.query.QueryResult>} value */
proto.query.ExecuteBatchResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.query.QueryResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.QueryResult}
 */
proto.query.ExecuteBatchResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.query.QueryResult, opt_index);
};


proto.query.ExecuteBatchResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.StreamExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.StreamExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.StreamExecuteRequest.displayName = 'proto.query.StreamExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.StreamExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.StreamExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.StreamExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.StreamExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.query.BoundQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.StreamExecuteRequest}
 */
proto.query.StreamExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.StreamExecuteRequest;
  return proto.query.StreamExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.StreamExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.StreamExecuteRequest}
 */
proto.query.StreamExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.StreamExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.StreamExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamExecuteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.StreamExecuteRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.StreamExecuteRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.StreamExecuteRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamExecuteRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.StreamExecuteRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.StreamExecuteRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.StreamExecuteRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamExecuteRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.StreamExecuteRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.StreamExecuteRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.StreamExecuteRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamExecuteRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BoundQuery query = 4;
 * @return {?proto.query.BoundQuery}
 */
proto.query.StreamExecuteRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, proto.query.BoundQuery, 4));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.query.StreamExecuteRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.query.StreamExecuteRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamExecuteRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.StreamExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.StreamExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.StreamExecuteResponse.displayName = 'proto.query.StreamExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.StreamExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.StreamExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.StreamExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.StreamExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.query.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.StreamExecuteResponse}
 */
proto.query.StreamExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.StreamExecuteResponse;
  return proto.query.StreamExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.StreamExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.StreamExecuteResponse}
 */
proto.query.StreamExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.QueryResult;
      reader.readMessage(value,proto.query.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.StreamExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.StreamExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamExecuteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.query.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional QueryResult result = 1;
 * @return {?proto.query.QueryResult}
 */
proto.query.StreamExecuteResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, proto.query.QueryResult, 1));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.query.StreamExecuteResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.StreamExecuteResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamExecuteResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BeginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.BeginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BeginRequest.displayName = 'proto.query.BeginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BeginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BeginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BeginRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BeginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BeginRequest}
 */
proto.query.BeginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BeginRequest;
  return proto.query.BeginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BeginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BeginRequest}
 */
proto.query.BeginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BeginRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BeginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.BeginRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.BeginRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.BeginRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.BeginRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.BeginRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.BeginRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.BeginRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.BeginRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.BeginRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BeginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.BeginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BeginResponse.displayName = 'proto.query.BeginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BeginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BeginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BeginResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BeginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BeginResponse}
 */
proto.query.BeginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BeginResponse;
  return proto.query.BeginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BeginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BeginResponse}
 */
proto.query.BeginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BeginResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BeginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 transaction_id = 1;
 * @return {number}
 */
proto.query.BeginResponse.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.query.BeginResponse.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.CommitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.CommitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.CommitRequest.displayName = 'proto.query.CommitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.CommitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.CommitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.CommitRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.CommitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    transactionId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.CommitRequest}
 */
proto.query.CommitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.CommitRequest;
  return proto.query.CommitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.CommitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.CommitRequest}
 */
proto.query.CommitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.CommitRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.CommitRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.CommitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.CommitRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.CommitRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.CommitRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.CommitRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.CommitRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.CommitRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.CommitRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.CommitRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.CommitRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.CommitRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.CommitRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.CommitRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.CommitRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 transaction_id = 4;
 * @return {number}
 */
proto.query.CommitRequest.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.query.CommitRequest.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.CommitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.CommitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.CommitResponse.displayName = 'proto.query.CommitResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.CommitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.CommitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.CommitResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.CommitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.CommitResponse}
 */
proto.query.CommitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.CommitResponse;
  return proto.query.CommitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.CommitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.CommitResponse}
 */
proto.query.CommitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.CommitResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.CommitResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.CommitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.CommitResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.RollbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.RollbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.RollbackRequest.displayName = 'proto.query.RollbackRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.RollbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.RollbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.RollbackRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.RollbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    transactionId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.RollbackRequest}
 */
proto.query.RollbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.RollbackRequest;
  return proto.query.RollbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.RollbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.RollbackRequest}
 */
proto.query.RollbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.RollbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.RollbackRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.RollbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.RollbackRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.RollbackRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.RollbackRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.RollbackRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.RollbackRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.RollbackRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.RollbackRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.RollbackRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.RollbackRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.RollbackRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.RollbackRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.RollbackRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.RollbackRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 transaction_id = 4;
 * @return {number}
 */
proto.query.RollbackRequest.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.query.RollbackRequest.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.RollbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.RollbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.RollbackResponse.displayName = 'proto.query.RollbackResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.RollbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.RollbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.RollbackResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.RollbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.RollbackResponse}
 */
proto.query.RollbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.RollbackResponse;
  return proto.query.RollbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.RollbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.RollbackResponse}
 */
proto.query.RollbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.RollbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.RollbackResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.RollbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.RollbackResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BeginExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.BeginExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BeginExecuteRequest.displayName = 'proto.query.BeginExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BeginExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BeginExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BeginExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BeginExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.query.BoundQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BeginExecuteRequest}
 */
proto.query.BeginExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BeginExecuteRequest;
  return proto.query.BeginExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BeginExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BeginExecuteRequest}
 */
proto.query.BeginExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BeginExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BeginExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.BeginExecuteRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.BeginExecuteRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.BeginExecuteRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.BeginExecuteRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.BeginExecuteRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.BeginExecuteRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.BeginExecuteRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.BeginExecuteRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.BeginExecuteRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BoundQuery query = 4;
 * @return {?proto.query.BoundQuery}
 */
proto.query.BeginExecuteRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, proto.query.BoundQuery, 4));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.query.BeginExecuteRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.query.BeginExecuteRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BeginExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.BeginExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BeginExecuteResponse.displayName = 'proto.query.BeginExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BeginExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BeginExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BeginExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BeginExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    result: (f = msg.getResult()) && proto.query.QueryResult.toObject(includeInstance, f),
    transactionId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BeginExecuteResponse}
 */
proto.query.BeginExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BeginExecuteResponse;
  return proto.query.BeginExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BeginExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BeginExecuteResponse}
 */
proto.query.BeginExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.query.QueryResult;
      reader.readMessage(value,proto.query.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BeginExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BeginExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.QueryResult.serializeBinaryToWriter
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.query.BeginExecuteResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.query.BeginExecuteResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.BeginExecuteResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional QueryResult result = 2;
 * @return {?proto.query.QueryResult}
 */
proto.query.BeginExecuteResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, proto.query.QueryResult, 2));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.query.BeginExecuteResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.BeginExecuteResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 transaction_id = 3;
 * @return {number}
 */
proto.query.BeginExecuteResponse.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.query.BeginExecuteResponse.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BeginExecuteBatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.BeginExecuteBatchRequest.repeatedFields_, null);
};
goog.inherits(proto.query.BeginExecuteBatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BeginExecuteBatchRequest.displayName = 'proto.query.BeginExecuteBatchRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.BeginExecuteBatchRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BeginExecuteBatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BeginExecuteBatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BeginExecuteBatchRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BeginExecuteBatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.query.BoundQuery.toObject, includeInstance),
    asTransaction: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BeginExecuteBatchRequest}
 */
proto.query.BeginExecuteBatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BeginExecuteBatchRequest;
  return proto.query.BeginExecuteBatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BeginExecuteBatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BeginExecuteBatchRequest}
 */
proto.query.BeginExecuteBatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BeginExecuteBatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteBatchRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BeginExecuteBatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteBatchRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getAsTransaction();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.BeginExecuteBatchRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.BeginExecuteBatchRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.BeginExecuteBatchRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteBatchRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.BeginExecuteBatchRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.BeginExecuteBatchRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.BeginExecuteBatchRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteBatchRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.BeginExecuteBatchRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.BeginExecuteBatchRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.BeginExecuteBatchRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteBatchRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated BoundQuery queries = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.BoundQuery>}
 */
proto.query.BeginExecuteBatchRequest.prototype.getQueriesList = function() {
  return /** @type{!Array.<!proto.query.BoundQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.BoundQuery, 4));
};


/** @param {!Array.<!proto.query.BoundQuery>} value */
proto.query.BeginExecuteBatchRequest.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.query.BoundQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.BoundQuery}
 */
proto.query.BeginExecuteBatchRequest.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.query.BoundQuery, opt_index);
};


proto.query.BeginExecuteBatchRequest.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};


/**
 * optional bool as_transaction = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.query.BeginExecuteBatchRequest.prototype.getAsTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.query.BeginExecuteBatchRequest.prototype.setAsTransaction = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.BeginExecuteBatchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.BeginExecuteBatchResponse.repeatedFields_, null);
};
goog.inherits(proto.query.BeginExecuteBatchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.BeginExecuteBatchResponse.displayName = 'proto.query.BeginExecuteBatchResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.BeginExecuteBatchResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.BeginExecuteBatchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.BeginExecuteBatchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.BeginExecuteBatchResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.BeginExecuteBatchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.query.QueryResult.toObject, includeInstance),
    transactionId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.BeginExecuteBatchResponse}
 */
proto.query.BeginExecuteBatchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.BeginExecuteBatchResponse;
  return proto.query.BeginExecuteBatchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.BeginExecuteBatchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.BeginExecuteBatchResponse}
 */
proto.query.BeginExecuteBatchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.query.QueryResult;
      reader.readMessage(value,proto.query.QueryResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.BeginExecuteBatchResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteBatchResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.BeginExecuteBatchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.BeginExecuteBatchResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.query.QueryResult.serializeBinaryToWriter
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.query.BeginExecuteBatchResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.query.BeginExecuteBatchResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.BeginExecuteBatchResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.BeginExecuteBatchResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated QueryResult results = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.QueryResult>}
 */
proto.query.BeginExecuteBatchResponse.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.query.QueryResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.QueryResult, 2));
};


/** @param {!Array.<!proto.query.QueryResult>} value */
proto.query.BeginExecuteBatchResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.query.QueryResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.QueryResult}
 */
proto.query.BeginExecuteBatchResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.query.QueryResult, opt_index);
};


proto.query.BeginExecuteBatchResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};


/**
 * optional int64 transaction_id = 3;
 * @return {number}
 */
proto.query.BeginExecuteBatchResponse.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.query.BeginExecuteBatchResponse.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.SplitQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.SplitQueryRequest.repeatedFields_, null);
};
goog.inherits(proto.query.SplitQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.SplitQueryRequest.displayName = 'proto.query.SplitQueryRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.SplitQueryRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.SplitQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.SplitQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.SplitQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.SplitQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    effectiveCallerId: (f = msg.getEffectiveCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    immediateCallerId: (f = msg.getImmediateCallerId()) && proto.query.VTGateCallerID.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && proto.query.BoundQuery.toObject(includeInstance, f),
    splitColumnList: jspb.Message.getField(msg, 5),
    splitCount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    numRowsPerQueryPart: jspb.Message.getFieldWithDefault(msg, 8, 0),
    algorithm: jspb.Message.getFieldWithDefault(msg, 9, 0),
    useSplitQueryV2: jspb.Message.getFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.SplitQueryRequest}
 */
proto.query.SplitQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.SplitQueryRequest;
  return proto.query.SplitQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.SplitQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.SplitQueryRequest}
 */
proto.query.SplitQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setEffectiveCallerId(value);
      break;
    case 2:
      var value = new proto.query.VTGateCallerID;
      reader.readMessage(value,proto.query.VTGateCallerID.deserializeBinaryFromReader);
      msg.setImmediateCallerId(value);
      break;
    case 3:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 4:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSplitColumn(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSplitCount(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumRowsPerQueryPart(value);
      break;
    case 9:
      var value = /** @type {!proto.query.SplitQueryRequest.Algorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSplitQueryV2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.SplitQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.SplitQueryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.SplitQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.SplitQueryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEffectiveCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getImmediateCallerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.query.VTGateCallerID.serializeBinaryToWriter
    );
  }
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getSplitColumnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = this.getSplitCount();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getNumRowsPerQueryPart();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = this.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = this.getUseSplitQueryV2();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID effective_caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.query.SplitQueryRequest.prototype.getEffectiveCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.query.SplitQueryRequest.prototype.setEffectiveCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.SplitQueryRequest.prototype.clearEffectiveCallerId = function() {
  this.setEffectiveCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.SplitQueryRequest.prototype.hasEffectiveCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VTGateCallerID immediate_caller_id = 2;
 * @return {?proto.query.VTGateCallerID}
 */
proto.query.SplitQueryRequest.prototype.getImmediateCallerId = function() {
  return /** @type{?proto.query.VTGateCallerID} */ (
    jspb.Message.getWrapperField(this, proto.query.VTGateCallerID, 2));
};


/** @param {?proto.query.VTGateCallerID|undefined} value */
proto.query.SplitQueryRequest.prototype.setImmediateCallerId = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.query.SplitQueryRequest.prototype.clearImmediateCallerId = function() {
  this.setImmediateCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.SplitQueryRequest.prototype.hasImmediateCallerId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Target target = 3;
 * @return {?proto.query.Target}
 */
proto.query.SplitQueryRequest.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 3));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.SplitQueryRequest.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.query.SplitQueryRequest.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.SplitQueryRequest.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BoundQuery query = 4;
 * @return {?proto.query.BoundQuery}
 */
proto.query.SplitQueryRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, proto.query.BoundQuery, 4));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.query.SplitQueryRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.query.SplitQueryRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.SplitQueryRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string split_column = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.query.SplitQueryRequest.prototype.getSplitColumnList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<string>} value */
proto.query.SplitQueryRequest.prototype.setSplitColumnList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.query.SplitQueryRequest.prototype.addSplitColumn = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.query.SplitQueryRequest.prototype.clearSplitColumnList = function() {
  this.setSplitColumnList([]);
};


/**
 * optional int64 split_count = 6;
 * @return {number}
 */
proto.query.SplitQueryRequest.prototype.getSplitCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.query.SplitQueryRequest.prototype.setSplitCount = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 num_rows_per_query_part = 8;
 * @return {number}
 */
proto.query.SplitQueryRequest.prototype.getNumRowsPerQueryPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.query.SplitQueryRequest.prototype.setNumRowsPerQueryPart = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional Algorithm algorithm = 9;
 * @return {!proto.query.SplitQueryRequest.Algorithm}
 */
proto.query.SplitQueryRequest.prototype.getAlgorithm = function() {
  return /** @type {!proto.query.SplitQueryRequest.Algorithm} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.query.SplitQueryRequest.Algorithm} value */
proto.query.SplitQueryRequest.prototype.setAlgorithm = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool use_split_query_v2 = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.query.SplitQueryRequest.prototype.getUseSplitQueryV2 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.query.SplitQueryRequest.prototype.setUseSplitQueryV2 = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * @enum {number}
 */
proto.query.SplitQueryRequest.Algorithm = {
  EQUAL_SPLITS: 0,
  FULL_SCAN: 1
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.QuerySplit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.QuerySplit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.QuerySplit.displayName = 'proto.query.QuerySplit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.QuerySplit.prototype.toObject = function(opt_includeInstance) {
  return proto.query.QuerySplit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.QuerySplit} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.QuerySplit.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && proto.query.BoundQuery.toObject(includeInstance, f),
    rowCount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.QuerySplit}
 */
proto.query.QuerySplit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.QuerySplit;
  return proto.query.QuerySplit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.QuerySplit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.QuerySplit}
 */
proto.query.QuerySplit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.BoundQuery;
      reader.readMessage(value,proto.query.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRowCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.QuerySplit} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.QuerySplit.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.QuerySplit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.QuerySplit.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.query.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getRowCount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional BoundQuery query = 1;
 * @return {?proto.query.BoundQuery}
 */
proto.query.QuerySplit.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, proto.query.BoundQuery, 1));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.query.QuerySplit.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.QuerySplit.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.QuerySplit.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 row_count = 2;
 * @return {number}
 */
proto.query.QuerySplit.prototype.getRowCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.query.QuerySplit.prototype.setRowCount = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.SplitQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.query.SplitQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.query.SplitQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.SplitQueryResponse.displayName = 'proto.query.SplitQueryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.query.SplitQueryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.SplitQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.SplitQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.SplitQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.SplitQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.query.QuerySplit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.SplitQueryResponse}
 */
proto.query.SplitQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.SplitQueryResponse;
  return proto.query.SplitQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.SplitQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.SplitQueryResponse}
 */
proto.query.SplitQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.QuerySplit;
      reader.readMessage(value,proto.query.QuerySplit.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.SplitQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.SplitQueryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.SplitQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.SplitQueryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.query.QuerySplit.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QuerySplit queries = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.QuerySplit>}
 */
proto.query.SplitQueryResponse.prototype.getQueriesList = function() {
  return /** @type{!Array.<!proto.query.QuerySplit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.query.QuerySplit, 1));
};


/** @param {!Array.<!proto.query.QuerySplit>} value */
proto.query.SplitQueryResponse.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.query.QuerySplit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.QuerySplit}
 */
proto.query.SplitQueryResponse.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.query.QuerySplit, opt_index);
};


proto.query.SplitQueryResponse.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.StreamHealthRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.StreamHealthRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.StreamHealthRequest.displayName = 'proto.query.StreamHealthRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.StreamHealthRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.query.StreamHealthRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.StreamHealthRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.StreamHealthRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.StreamHealthRequest}
 */
proto.query.StreamHealthRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.StreamHealthRequest;
  return proto.query.StreamHealthRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.StreamHealthRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.StreamHealthRequest}
 */
proto.query.StreamHealthRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.StreamHealthRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamHealthRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.StreamHealthRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamHealthRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.RealtimeStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.RealtimeStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.RealtimeStats.displayName = 'proto.query.RealtimeStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.RealtimeStats.prototype.toObject = function(opt_includeInstance) {
  return proto.query.RealtimeStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.RealtimeStats} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.RealtimeStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    healthError: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secondsBehindMaster: jspb.Message.getFieldWithDefault(msg, 2, 0),
    binlogPlayersCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    secondsBehindMasterFilteredReplication: jspb.Message.getFieldWithDefault(msg, 4, 0),
    cpuUsage: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    qps: +jspb.Message.getFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.RealtimeStats}
 */
proto.query.RealtimeStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.RealtimeStats;
  return proto.query.RealtimeStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.RealtimeStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.RealtimeStats}
 */
proto.query.RealtimeStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHealthError(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondsBehindMaster(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBinlogPlayersCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSecondsBehindMasterFilteredReplication(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCpuUsage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.RealtimeStats} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.RealtimeStats.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.RealtimeStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.RealtimeStats.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHealthError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSecondsBehindMaster();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getBinlogPlayersCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getSecondsBehindMasterFilteredReplication();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = this.getCpuUsage();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = this.getQps();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional string health_error = 1;
 * @return {string}
 */
proto.query.RealtimeStats.prototype.getHealthError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.query.RealtimeStats.prototype.setHealthError = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 seconds_behind_master = 2;
 * @return {number}
 */
proto.query.RealtimeStats.prototype.getSecondsBehindMaster = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.query.RealtimeStats.prototype.setSecondsBehindMaster = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 binlog_players_count = 3;
 * @return {number}
 */
proto.query.RealtimeStats.prototype.getBinlogPlayersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.query.RealtimeStats.prototype.setBinlogPlayersCount = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 seconds_behind_master_filtered_replication = 4;
 * @return {number}
 */
proto.query.RealtimeStats.prototype.getSecondsBehindMasterFilteredReplication = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.query.RealtimeStats.prototype.setSecondsBehindMasterFilteredReplication = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double cpu_usage = 5;
 * @return {number}
 */
proto.query.RealtimeStats.prototype.getCpuUsage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.query.RealtimeStats.prototype.setCpuUsage = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional double qps = 6;
 * @return {number}
 */
proto.query.RealtimeStats.prototype.getQps = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.query.RealtimeStats.prototype.setQps = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.query.StreamHealthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.query.StreamHealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.query.StreamHealthResponse.displayName = 'proto.query.StreamHealthResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.query.StreamHealthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.query.StreamHealthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.query.StreamHealthResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.query.StreamHealthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && proto.query.Target.toObject(includeInstance, f),
    serving: jspb.Message.getFieldWithDefault(msg, 2, false),
    tabletExternallyReparentedTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    realtimeStats: (f = msg.getRealtimeStats()) && proto.query.RealtimeStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.query.StreamHealthResponse}
 */
proto.query.StreamHealthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.query.StreamHealthResponse;
  return proto.query.StreamHealthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.query.StreamHealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.query.StreamHealthResponse}
 */
proto.query.StreamHealthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.query.Target;
      reader.readMessage(value,proto.query.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setServing(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTabletExternallyReparentedTimestamp(value);
      break;
    case 4:
      var value = new proto.query.RealtimeStats;
      reader.readMessage(value,proto.query.RealtimeStats.deserializeBinaryFromReader);
      msg.setRealtimeStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.query.StreamHealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamHealthResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.query.StreamHealthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.query.StreamHealthResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.query.Target.serializeBinaryToWriter
    );
  }
  f = this.getServing();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getTabletExternallyReparentedTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getRealtimeStats();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.query.RealtimeStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional Target target = 1;
 * @return {?proto.query.Target}
 */
proto.query.StreamHealthResponse.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, proto.query.Target, 1));
};


/** @param {?proto.query.Target|undefined} value */
proto.query.StreamHealthResponse.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.query.StreamHealthResponse.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamHealthResponse.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool serving = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.query.StreamHealthResponse.prototype.getServing = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.query.StreamHealthResponse.prototype.setServing = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 tablet_externally_reparented_timestamp = 3;
 * @return {number}
 */
proto.query.StreamHealthResponse.prototype.getTabletExternallyReparentedTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.query.StreamHealthResponse.prototype.setTabletExternallyReparentedTimestamp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional RealtimeStats realtime_stats = 4;
 * @return {?proto.query.RealtimeStats}
 */
proto.query.StreamHealthResponse.prototype.getRealtimeStats = function() {
  return /** @type{?proto.query.RealtimeStats} */ (
    jspb.Message.getWrapperField(this, proto.query.RealtimeStats, 4));
};


/** @param {?proto.query.RealtimeStats|undefined} value */
proto.query.StreamHealthResponse.prototype.setRealtimeStats = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.query.StreamHealthResponse.prototype.clearRealtimeStats = function() {
  this.setRealtimeStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.query.StreamHealthResponse.prototype.hasRealtimeStats = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.query.Flag = {
  NONE: 0,
  ISINTEGRAL: 256,
  ISUNSIGNED: 512,
  ISFLOAT: 1024,
  ISQUOTED: 2048,
  ISTEXT: 4096,
  ISBINARY: 8192
};

/**
 * @enum {number}
 */
proto.query.Type = {
  NULL_TYPE: 0,
  INT8: 257,
  UINT8: 770,
  INT16: 259,
  UINT16: 772,
  INT24: 261,
  UINT24: 774,
  INT32: 263,
  UINT32: 776,
  INT64: 265,
  UINT64: 778,
  FLOAT32: 1035,
  FLOAT64: 1036,
  TIMESTAMP: 2061,
  DATE: 2062,
  TIME: 2063,
  DATETIME: 2064,
  YEAR: 785,
  DECIMAL: 18,
  TEXT: 6163,
  BLOB: 10260,
  VARCHAR: 6165,
  VARBINARY: 10262,
  CHAR: 6167,
  BINARY: 10264,
  BIT: 2073,
  ENUM: 2074,
  SET: 2075,
  TUPLE: 28
};

goog.object.extend(exports, proto.query);
