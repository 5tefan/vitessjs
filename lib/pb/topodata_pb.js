/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.topodata.KeyRange', null, global);
goog.exportSymbol('proto.topodata.Keyspace', null, global);
goog.exportSymbol('proto.topodata.Keyspace.ServedFrom', null, global);
goog.exportSymbol('proto.topodata.KeyspaceIdType', null, global);
goog.exportSymbol('proto.topodata.Shard', null, global);
goog.exportSymbol('proto.topodata.Shard.ServedType', null, global);
goog.exportSymbol('proto.topodata.Shard.SourceShard', null, global);
goog.exportSymbol('proto.topodata.Shard.TabletControl', null, global);
goog.exportSymbol('proto.topodata.ShardReference', null, global);
goog.exportSymbol('proto.topodata.ShardReplication', null, global);
goog.exportSymbol('proto.topodata.ShardReplication.Node', null, global);
goog.exportSymbol('proto.topodata.SrvKeyspace', null, global);
goog.exportSymbol('proto.topodata.SrvKeyspace.KeyspacePartition', null, global);
goog.exportSymbol('proto.topodata.SrvKeyspace.ServedFrom', null, global);
goog.exportSymbol('proto.topodata.Tablet', null, global);
goog.exportSymbol('proto.topodata.TabletAlias', null, global);
goog.exportSymbol('proto.topodata.TabletType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.KeyRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.topodata.KeyRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.KeyRange.displayName = 'proto.topodata.KeyRange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.KeyRange.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.KeyRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.KeyRange} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.KeyRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: msg.getStart_asB64(),
    end: msg.getEnd_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.KeyRange}
 */
proto.topodata.KeyRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.KeyRange;
  return proto.topodata.KeyRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.KeyRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.KeyRange}
 */
proto.topodata.KeyRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.KeyRange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.KeyRange.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.KeyRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.KeyRange.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStart_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getEnd_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes start = 1;
 * @return {!(string|Uint8Array)}
 */
proto.topodata.KeyRange.prototype.getStart = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes start = 1;
 * This is a type-conversion wrapper around `getStart()`
 * @return {string}
 */
proto.topodata.KeyRange.prototype.getStart_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStart()));
};


/**
 * optional bytes start = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStart()`
 * @return {!Uint8Array}
 */
proto.topodata.KeyRange.prototype.getStart_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStart()));
};


/** @param {!(string|Uint8Array)} value */
proto.topodata.KeyRange.prototype.setStart = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes end = 2;
 * @return {!(string|Uint8Array)}
 */
proto.topodata.KeyRange.prototype.getEnd = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes end = 2;
 * This is a type-conversion wrapper around `getEnd()`
 * @return {string}
 */
proto.topodata.KeyRange.prototype.getEnd_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEnd()));
};


/**
 * optional bytes end = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEnd()`
 * @return {!Uint8Array}
 */
proto.topodata.KeyRange.prototype.getEnd_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEnd()));
};


/** @param {!(string|Uint8Array)} value */
proto.topodata.KeyRange.prototype.setEnd = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.TabletAlias = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.topodata.TabletAlias, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.TabletAlias.displayName = 'proto.topodata.TabletAlias';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.TabletAlias.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.TabletAlias.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.TabletAlias} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.TabletAlias.toObject = function(includeInstance, msg) {
  var f, obj = {
    cell: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.TabletAlias}
 */
proto.topodata.TabletAlias.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.TabletAlias;
  return proto.topodata.TabletAlias.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.TabletAlias} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.TabletAlias}
 */
proto.topodata.TabletAlias.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCell(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.TabletAlias} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.TabletAlias.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.TabletAlias.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.TabletAlias.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCell();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getUid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string cell = 1;
 * @return {string}
 */
proto.topodata.TabletAlias.prototype.getCell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.topodata.TabletAlias.prototype.setCell = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 uid = 2;
 * @return {number}
 */
proto.topodata.TabletAlias.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.topodata.TabletAlias.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Tablet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.topodata.Tablet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Tablet.displayName = 'proto.topodata.Tablet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Tablet.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Tablet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Tablet} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Tablet.toObject = function(includeInstance, msg) {
  var f, obj = {
    alias: (f = msg.getAlias()) && proto.topodata.TabletAlias.toObject(includeInstance, f),
    hostname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    portMapMap: (f = msg.getPortMapMap()) ? f.toArray() : [],
    keyspace: jspb.Message.getFieldWithDefault(msg, 5, ""),
    shard: jspb.Message.getFieldWithDefault(msg, 6, ""),
    keyRange: (f = msg.getKeyRange()) && proto.topodata.KeyRange.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 8, 0),
    dbNameOverride: jspb.Message.getFieldWithDefault(msg, 9, ""),
    tagsMap: (f = msg.getTagsMap()) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Tablet}
 */
proto.topodata.Tablet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Tablet;
  return proto.topodata.Tablet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Tablet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Tablet}
 */
proto.topodata.Tablet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.topodata.TabletAlias;
      reader.readMessage(value,proto.topodata.TabletAlias.deserializeBinaryFromReader);
      msg.setAlias(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 4:
      var value = msg.getPortMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readInt32);
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setShard(value);
      break;
    case 7:
      var value = new proto.topodata.KeyRange;
      reader.readMessage(value,proto.topodata.KeyRange.deserializeBinaryFromReader);
      msg.setKeyRange(value);
      break;
    case 8:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbNameOverride(value);
      break;
    case 10:
      var value = msg.getTagsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Tablet} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Tablet.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Tablet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Tablet.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAlias();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.topodata.TabletAlias.serializeBinaryToWriter
    );
  }
  f = this.getHostname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getIp();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPortMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeInt32);
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getShard();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getKeyRange();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.topodata.KeyRange.serializeBinaryToWriter
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = this.getDbNameOverride();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getTagsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional TabletAlias alias = 1;
 * @return {?proto.topodata.TabletAlias}
 */
proto.topodata.Tablet.prototype.getAlias = function() {
  return /** @type{?proto.topodata.TabletAlias} */ (
    jspb.Message.getWrapperField(this, proto.topodata.TabletAlias, 1));
};


/** @param {?proto.topodata.TabletAlias|undefined} value */
proto.topodata.Tablet.prototype.setAlias = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.topodata.Tablet.prototype.clearAlias = function() {
  this.setAlias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.Tablet.prototype.hasAlias = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string hostname = 2;
 * @return {string}
 */
proto.topodata.Tablet.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.topodata.Tablet.prototype.setHostname = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.topodata.Tablet.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.topodata.Tablet.prototype.setIp = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * map<string, int32> port_map = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.topodata.Tablet.prototype.getPortMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.topodata.Tablet.prototype.clearPortMapMap = function() {
  this.getPortMapMap().clear();
};


/**
 * optional string keyspace = 5;
 * @return {string}
 */
proto.topodata.Tablet.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.topodata.Tablet.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string shard = 6;
 * @return {string}
 */
proto.topodata.Tablet.prototype.getShard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.topodata.Tablet.prototype.setShard = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional KeyRange key_range = 7;
 * @return {?proto.topodata.KeyRange}
 */
proto.topodata.Tablet.prototype.getKeyRange = function() {
  return /** @type{?proto.topodata.KeyRange} */ (
    jspb.Message.getWrapperField(this, proto.topodata.KeyRange, 7));
};


/** @param {?proto.topodata.KeyRange|undefined} value */
proto.topodata.Tablet.prototype.setKeyRange = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.topodata.Tablet.prototype.clearKeyRange = function() {
  this.setKeyRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.Tablet.prototype.hasKeyRange = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional TabletType type = 8;
 * @return {!proto.topodata.TabletType}
 */
proto.topodata.Tablet.prototype.getType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.topodata.Tablet.prototype.setType = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string db_name_override = 9;
 * @return {string}
 */
proto.topodata.Tablet.prototype.getDbNameOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.topodata.Tablet.prototype.setDbNameOverride = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * map<string, string> tags = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.topodata.Tablet.prototype.getTagsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


proto.topodata.Tablet.prototype.clearTagsMap = function() {
  this.getTagsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Shard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.Shard.repeatedFields_, null);
};
goog.inherits(proto.topodata.Shard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Shard.displayName = 'proto.topodata.Shard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.Shard.repeatedFields_ = [3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Shard.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Shard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Shard} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Shard.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterAlias: (f = msg.getMasterAlias()) && proto.topodata.TabletAlias.toObject(includeInstance, f),
    keyRange: (f = msg.getKeyRange()) && proto.topodata.KeyRange.toObject(includeInstance, f),
    servedTypesList: jspb.Message.toObjectList(msg.getServedTypesList(),
    proto.topodata.Shard.ServedType.toObject, includeInstance),
    sourceShardsList: jspb.Message.toObjectList(msg.getSourceShardsList(),
    proto.topodata.Shard.SourceShard.toObject, includeInstance),
    cellsList: jspb.Message.getField(msg, 5),
    tabletControlsList: jspb.Message.toObjectList(msg.getTabletControlsList(),
    proto.topodata.Shard.TabletControl.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Shard}
 */
proto.topodata.Shard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Shard;
  return proto.topodata.Shard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Shard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Shard}
 */
proto.topodata.Shard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.topodata.TabletAlias;
      reader.readMessage(value,proto.topodata.TabletAlias.deserializeBinaryFromReader);
      msg.setMasterAlias(value);
      break;
    case 2:
      var value = new proto.topodata.KeyRange;
      reader.readMessage(value,proto.topodata.KeyRange.deserializeBinaryFromReader);
      msg.setKeyRange(value);
      break;
    case 3:
      var value = new proto.topodata.Shard.ServedType;
      reader.readMessage(value,proto.topodata.Shard.ServedType.deserializeBinaryFromReader);
      msg.addServedTypes(value);
      break;
    case 4:
      var value = new proto.topodata.Shard.SourceShard;
      reader.readMessage(value,proto.topodata.Shard.SourceShard.deserializeBinaryFromReader);
      msg.addSourceShards(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addCells(value);
      break;
    case 6:
      var value = new proto.topodata.Shard.TabletControl;
      reader.readMessage(value,proto.topodata.Shard.TabletControl.deserializeBinaryFromReader);
      msg.addTabletControls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Shard} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Shard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMasterAlias();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.topodata.TabletAlias.serializeBinaryToWriter
    );
  }
  f = this.getKeyRange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.topodata.KeyRange.serializeBinaryToWriter
    );
  }
  f = this.getServedTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.topodata.Shard.ServedType.serializeBinaryToWriter
    );
  }
  f = this.getSourceShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.topodata.Shard.SourceShard.serializeBinaryToWriter
    );
  }
  f = this.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = this.getTabletControlsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.topodata.Shard.TabletControl.serializeBinaryToWriter
    );
  }
};


/**
 * optional TabletAlias master_alias = 1;
 * @return {?proto.topodata.TabletAlias}
 */
proto.topodata.Shard.prototype.getMasterAlias = function() {
  return /** @type{?proto.topodata.TabletAlias} */ (
    jspb.Message.getWrapperField(this, proto.topodata.TabletAlias, 1));
};


/** @param {?proto.topodata.TabletAlias|undefined} value */
proto.topodata.Shard.prototype.setMasterAlias = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.topodata.Shard.prototype.clearMasterAlias = function() {
  this.setMasterAlias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.Shard.prototype.hasMasterAlias = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KeyRange key_range = 2;
 * @return {?proto.topodata.KeyRange}
 */
proto.topodata.Shard.prototype.getKeyRange = function() {
  return /** @type{?proto.topodata.KeyRange} */ (
    jspb.Message.getWrapperField(this, proto.topodata.KeyRange, 2));
};


/** @param {?proto.topodata.KeyRange|undefined} value */
proto.topodata.Shard.prototype.setKeyRange = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.topodata.Shard.prototype.clearKeyRange = function() {
  this.setKeyRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.Shard.prototype.hasKeyRange = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated ServedType served_types = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.Shard.ServedType>}
 */
proto.topodata.Shard.prototype.getServedTypesList = function() {
  return /** @type{!Array.<!proto.topodata.Shard.ServedType>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.Shard.ServedType, 3));
};


/** @param {!Array.<!proto.topodata.Shard.ServedType>} value */
proto.topodata.Shard.prototype.setServedTypesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.topodata.Shard.ServedType=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.Shard.ServedType}
 */
proto.topodata.Shard.prototype.addServedTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.topodata.Shard.ServedType, opt_index);
};


proto.topodata.Shard.prototype.clearServedTypesList = function() {
  this.setServedTypesList([]);
};


/**
 * repeated SourceShard source_shards = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.Shard.SourceShard>}
 */
proto.topodata.Shard.prototype.getSourceShardsList = function() {
  return /** @type{!Array.<!proto.topodata.Shard.SourceShard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.Shard.SourceShard, 4));
};


/** @param {!Array.<!proto.topodata.Shard.SourceShard>} value */
proto.topodata.Shard.prototype.setSourceShardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.topodata.Shard.SourceShard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.Shard.SourceShard}
 */
proto.topodata.Shard.prototype.addSourceShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.topodata.Shard.SourceShard, opt_index);
};


proto.topodata.Shard.prototype.clearSourceShardsList = function() {
  this.setSourceShardsList([]);
};


/**
 * repeated string cells = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.topodata.Shard.prototype.getCellsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<string>} value */
proto.topodata.Shard.prototype.setCellsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.topodata.Shard.prototype.addCells = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.topodata.Shard.prototype.clearCellsList = function() {
  this.setCellsList([]);
};


/**
 * repeated TabletControl tablet_controls = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.Shard.TabletControl>}
 */
proto.topodata.Shard.prototype.getTabletControlsList = function() {
  return /** @type{!Array.<!proto.topodata.Shard.TabletControl>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.Shard.TabletControl, 6));
};


/** @param {!Array.<!proto.topodata.Shard.TabletControl>} value */
proto.topodata.Shard.prototype.setTabletControlsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.topodata.Shard.TabletControl=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.Shard.TabletControl}
 */
proto.topodata.Shard.prototype.addTabletControls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.topodata.Shard.TabletControl, opt_index);
};


proto.topodata.Shard.prototype.clearTabletControlsList = function() {
  this.setTabletControlsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Shard.ServedType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.Shard.ServedType.repeatedFields_, null);
};
goog.inherits(proto.topodata.Shard.ServedType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Shard.ServedType.displayName = 'proto.topodata.Shard.ServedType';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.Shard.ServedType.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Shard.ServedType.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Shard.ServedType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Shard.ServedType} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Shard.ServedType.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabletType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cellsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Shard.ServedType}
 */
proto.topodata.Shard.ServedType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Shard.ServedType;
  return proto.topodata.Shard.ServedType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Shard.ServedType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Shard.ServedType}
 */
proto.topodata.Shard.ServedType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCells(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Shard.ServedType} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.ServedType.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Shard.ServedType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.ServedType.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional TabletType tablet_type = 1;
 * @return {!proto.topodata.TabletType}
 */
proto.topodata.Shard.ServedType.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.topodata.Shard.ServedType.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string cells = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.topodata.Shard.ServedType.prototype.getCellsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.topodata.Shard.ServedType.prototype.setCellsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.topodata.Shard.ServedType.prototype.addCells = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.topodata.Shard.ServedType.prototype.clearCellsList = function() {
  this.setCellsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Shard.SourceShard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.Shard.SourceShard.repeatedFields_, null);
};
goog.inherits(proto.topodata.Shard.SourceShard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Shard.SourceShard.displayName = 'proto.topodata.Shard.SourceShard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.Shard.SourceShard.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Shard.SourceShard.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Shard.SourceShard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Shard.SourceShard} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Shard.SourceShard.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyspace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shard: jspb.Message.getFieldWithDefault(msg, 3, ""),
    keyRange: (f = msg.getKeyRange()) && proto.topodata.KeyRange.toObject(includeInstance, f),
    tablesList: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Shard.SourceShard}
 */
proto.topodata.Shard.SourceShard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Shard.SourceShard;
  return proto.topodata.Shard.SourceShard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Shard.SourceShard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Shard.SourceShard}
 */
proto.topodata.Shard.SourceShard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShard(value);
      break;
    case 4:
      var value = new proto.topodata.KeyRange;
      reader.readMessage(value,proto.topodata.KeyRange.deserializeBinaryFromReader);
      msg.setKeyRange(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Shard.SourceShard} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.SourceShard.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Shard.SourceShard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.SourceShard.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getShard();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getKeyRange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.topodata.KeyRange.serializeBinaryToWriter
    );
  }
  f = this.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional uint32 uid = 1;
 * @return {number}
 */
proto.topodata.Shard.SourceShard.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.topodata.Shard.SourceShard.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string keyspace = 2;
 * @return {string}
 */
proto.topodata.Shard.SourceShard.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.topodata.Shard.SourceShard.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string shard = 3;
 * @return {string}
 */
proto.topodata.Shard.SourceShard.prototype.getShard = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.topodata.Shard.SourceShard.prototype.setShard = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional KeyRange key_range = 4;
 * @return {?proto.topodata.KeyRange}
 */
proto.topodata.Shard.SourceShard.prototype.getKeyRange = function() {
  return /** @type{?proto.topodata.KeyRange} */ (
    jspb.Message.getWrapperField(this, proto.topodata.KeyRange, 4));
};


/** @param {?proto.topodata.KeyRange|undefined} value */
proto.topodata.Shard.SourceShard.prototype.setKeyRange = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.topodata.Shard.SourceShard.prototype.clearKeyRange = function() {
  this.setKeyRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.Shard.SourceShard.prototype.hasKeyRange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string tables = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.topodata.Shard.SourceShard.prototype.getTablesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<string>} value */
proto.topodata.Shard.SourceShard.prototype.setTablesList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.topodata.Shard.SourceShard.prototype.addTables = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.topodata.Shard.SourceShard.prototype.clearTablesList = function() {
  this.setTablesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Shard.TabletControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.Shard.TabletControl.repeatedFields_, null);
};
goog.inherits(proto.topodata.Shard.TabletControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Shard.TabletControl.displayName = 'proto.topodata.Shard.TabletControl';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.Shard.TabletControl.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Shard.TabletControl.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Shard.TabletControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Shard.TabletControl} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Shard.TabletControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabletType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cellsList: jspb.Message.getField(msg, 2),
    disableQueryService: jspb.Message.getFieldWithDefault(msg, 3, false),
    blacklistedTablesList: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Shard.TabletControl}
 */
proto.topodata.Shard.TabletControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Shard.TabletControl;
  return proto.topodata.Shard.TabletControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Shard.TabletControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Shard.TabletControl}
 */
proto.topodata.Shard.TabletControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCells(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDisableQueryService(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addBlacklistedTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Shard.TabletControl} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.TabletControl.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Shard.TabletControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Shard.TabletControl.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getDisableQueryService();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = this.getBlacklistedTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional TabletType tablet_type = 1;
 * @return {!proto.topodata.TabletType}
 */
proto.topodata.Shard.TabletControl.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.topodata.Shard.TabletControl.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string cells = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.topodata.Shard.TabletControl.prototype.getCellsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.topodata.Shard.TabletControl.prototype.setCellsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.topodata.Shard.TabletControl.prototype.addCells = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.topodata.Shard.TabletControl.prototype.clearCellsList = function() {
  this.setCellsList([]);
};


/**
 * optional bool disable_query_service = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.topodata.Shard.TabletControl.prototype.getDisableQueryService = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.topodata.Shard.TabletControl.prototype.setDisableQueryService = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string blacklisted_tables = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.topodata.Shard.TabletControl.prototype.getBlacklistedTablesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.topodata.Shard.TabletControl.prototype.setBlacklistedTablesList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.topodata.Shard.TabletControl.prototype.addBlacklistedTables = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.topodata.Shard.TabletControl.prototype.clearBlacklistedTablesList = function() {
  this.setBlacklistedTablesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Keyspace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.Keyspace.repeatedFields_, null);
};
goog.inherits(proto.topodata.Keyspace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Keyspace.displayName = 'proto.topodata.Keyspace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.Keyspace.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Keyspace.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Keyspace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Keyspace} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Keyspace.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardingColumnName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shardingColumnType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    servedFromsList: jspb.Message.toObjectList(msg.getServedFromsList(),
    proto.topodata.Keyspace.ServedFrom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Keyspace}
 */
proto.topodata.Keyspace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Keyspace;
  return proto.topodata.Keyspace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Keyspace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Keyspace}
 */
proto.topodata.Keyspace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardingColumnName(value);
      break;
    case 2:
      var value = /** @type {!proto.topodata.KeyspaceIdType} */ (reader.readEnum());
      msg.setShardingColumnType(value);
      break;
    case 4:
      var value = new proto.topodata.Keyspace.ServedFrom;
      reader.readMessage(value,proto.topodata.Keyspace.ServedFrom.deserializeBinaryFromReader);
      msg.addServedFroms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Keyspace} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Keyspace.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Keyspace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Keyspace.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getShardingColumnName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getShardingColumnType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getServedFromsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.topodata.Keyspace.ServedFrom.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sharding_column_name = 1;
 * @return {string}
 */
proto.topodata.Keyspace.prototype.getShardingColumnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.topodata.Keyspace.prototype.setShardingColumnName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional KeyspaceIdType sharding_column_type = 2;
 * @return {!proto.topodata.KeyspaceIdType}
 */
proto.topodata.Keyspace.prototype.getShardingColumnType = function() {
  return /** @type {!proto.topodata.KeyspaceIdType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.topodata.KeyspaceIdType} value */
proto.topodata.Keyspace.prototype.setShardingColumnType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated ServedFrom served_froms = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.Keyspace.ServedFrom>}
 */
proto.topodata.Keyspace.prototype.getServedFromsList = function() {
  return /** @type{!Array.<!proto.topodata.Keyspace.ServedFrom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.Keyspace.ServedFrom, 4));
};


/** @param {!Array.<!proto.topodata.Keyspace.ServedFrom>} value */
proto.topodata.Keyspace.prototype.setServedFromsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.topodata.Keyspace.ServedFrom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.Keyspace.ServedFrom}
 */
proto.topodata.Keyspace.prototype.addServedFroms = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.topodata.Keyspace.ServedFrom, opt_index);
};


proto.topodata.Keyspace.prototype.clearServedFromsList = function() {
  this.setServedFromsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.Keyspace.ServedFrom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.Keyspace.ServedFrom.repeatedFields_, null);
};
goog.inherits(proto.topodata.Keyspace.ServedFrom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.Keyspace.ServedFrom.displayName = 'proto.topodata.Keyspace.ServedFrom';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.Keyspace.ServedFrom.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.Keyspace.ServedFrom.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.Keyspace.ServedFrom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.Keyspace.ServedFrom} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.Keyspace.ServedFrom.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabletType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cellsList: jspb.Message.getField(msg, 2),
    keyspace: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.Keyspace.ServedFrom}
 */
proto.topodata.Keyspace.ServedFrom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.Keyspace.ServedFrom;
  return proto.topodata.Keyspace.ServedFrom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.Keyspace.ServedFrom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.Keyspace.ServedFrom}
 */
proto.topodata.Keyspace.ServedFrom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCells(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.Keyspace.ServedFrom} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Keyspace.ServedFrom.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.Keyspace.ServedFrom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.Keyspace.ServedFrom.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getCellsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional TabletType tablet_type = 1;
 * @return {!proto.topodata.TabletType}
 */
proto.topodata.Keyspace.ServedFrom.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.topodata.Keyspace.ServedFrom.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string cells = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.topodata.Keyspace.ServedFrom.prototype.getCellsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.topodata.Keyspace.ServedFrom.prototype.setCellsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.topodata.Keyspace.ServedFrom.prototype.addCells = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.topodata.Keyspace.ServedFrom.prototype.clearCellsList = function() {
  this.setCellsList([]);
};


/**
 * optional string keyspace = 3;
 * @return {string}
 */
proto.topodata.Keyspace.ServedFrom.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.topodata.Keyspace.ServedFrom.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.ShardReplication = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.ShardReplication.repeatedFields_, null);
};
goog.inherits(proto.topodata.ShardReplication, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.ShardReplication.displayName = 'proto.topodata.ShardReplication';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.ShardReplication.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.ShardReplication.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.ShardReplication.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.ShardReplication} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.ShardReplication.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.topodata.ShardReplication.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.ShardReplication}
 */
proto.topodata.ShardReplication.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.ShardReplication;
  return proto.topodata.ShardReplication.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.ShardReplication} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.ShardReplication}
 */
proto.topodata.ShardReplication.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.topodata.ShardReplication.Node;
      reader.readMessage(value,proto.topodata.ShardReplication.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.ShardReplication} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.ShardReplication.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.ShardReplication.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.ShardReplication.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.topodata.ShardReplication.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node nodes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.ShardReplication.Node>}
 */
proto.topodata.ShardReplication.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.topodata.ShardReplication.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.ShardReplication.Node, 1));
};


/** @param {!Array.<!proto.topodata.ShardReplication.Node>} value */
proto.topodata.ShardReplication.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.topodata.ShardReplication.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.ShardReplication.Node}
 */
proto.topodata.ShardReplication.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.topodata.ShardReplication.Node, opt_index);
};


proto.topodata.ShardReplication.prototype.clearNodesList = function() {
  this.setNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.ShardReplication.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.topodata.ShardReplication.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.ShardReplication.Node.displayName = 'proto.topodata.ShardReplication.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.ShardReplication.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.ShardReplication.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.ShardReplication.Node} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.ShardReplication.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabletAlias: (f = msg.getTabletAlias()) && proto.topodata.TabletAlias.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.ShardReplication.Node}
 */
proto.topodata.ShardReplication.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.ShardReplication.Node;
  return proto.topodata.ShardReplication.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.ShardReplication.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.ShardReplication.Node}
 */
proto.topodata.ShardReplication.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.topodata.TabletAlias;
      reader.readMessage(value,proto.topodata.TabletAlias.deserializeBinaryFromReader);
      msg.setTabletAlias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.ShardReplication.Node} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.ShardReplication.Node.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.ShardReplication.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.ShardReplication.Node.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTabletAlias();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.topodata.TabletAlias.serializeBinaryToWriter
    );
  }
};


/**
 * optional TabletAlias tablet_alias = 1;
 * @return {?proto.topodata.TabletAlias}
 */
proto.topodata.ShardReplication.Node.prototype.getTabletAlias = function() {
  return /** @type{?proto.topodata.TabletAlias} */ (
    jspb.Message.getWrapperField(this, proto.topodata.TabletAlias, 1));
};


/** @param {?proto.topodata.TabletAlias|undefined} value */
proto.topodata.ShardReplication.Node.prototype.setTabletAlias = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.topodata.ShardReplication.Node.prototype.clearTabletAlias = function() {
  this.setTabletAlias(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.ShardReplication.Node.prototype.hasTabletAlias = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.ShardReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.topodata.ShardReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.ShardReference.displayName = 'proto.topodata.ShardReference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.ShardReference.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.ShardReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.ShardReference} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.ShardReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyRange: (f = msg.getKeyRange()) && proto.topodata.KeyRange.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.ShardReference}
 */
proto.topodata.ShardReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.ShardReference;
  return proto.topodata.ShardReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.ShardReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.ShardReference}
 */
proto.topodata.ShardReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.topodata.KeyRange;
      reader.readMessage(value,proto.topodata.KeyRange.deserializeBinaryFromReader);
      msg.setKeyRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.ShardReference} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.ShardReference.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.ShardReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.ShardReference.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getKeyRange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.topodata.KeyRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.topodata.ShardReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.topodata.ShardReference.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional KeyRange key_range = 2;
 * @return {?proto.topodata.KeyRange}
 */
proto.topodata.ShardReference.prototype.getKeyRange = function() {
  return /** @type{?proto.topodata.KeyRange} */ (
    jspb.Message.getWrapperField(this, proto.topodata.KeyRange, 2));
};


/** @param {?proto.topodata.KeyRange|undefined} value */
proto.topodata.ShardReference.prototype.setKeyRange = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.topodata.ShardReference.prototype.clearKeyRange = function() {
  this.setKeyRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.topodata.ShardReference.prototype.hasKeyRange = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.SrvKeyspace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.SrvKeyspace.repeatedFields_, null);
};
goog.inherits(proto.topodata.SrvKeyspace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.SrvKeyspace.displayName = 'proto.topodata.SrvKeyspace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.SrvKeyspace.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.SrvKeyspace.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.SrvKeyspace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.SrvKeyspace} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.SrvKeyspace.toObject = function(includeInstance, msg) {
  var f, obj = {
    partitionsList: jspb.Message.toObjectList(msg.getPartitionsList(),
    proto.topodata.SrvKeyspace.KeyspacePartition.toObject, includeInstance),
    shardingColumnName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shardingColumnType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    servedFromList: jspb.Message.toObjectList(msg.getServedFromList(),
    proto.topodata.SrvKeyspace.ServedFrom.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.SrvKeyspace}
 */
proto.topodata.SrvKeyspace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.SrvKeyspace;
  return proto.topodata.SrvKeyspace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.SrvKeyspace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.SrvKeyspace}
 */
proto.topodata.SrvKeyspace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.topodata.SrvKeyspace.KeyspacePartition;
      reader.readMessage(value,proto.topodata.SrvKeyspace.KeyspacePartition.deserializeBinaryFromReader);
      msg.addPartitions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardingColumnName(value);
      break;
    case 3:
      var value = /** @type {!proto.topodata.KeyspaceIdType} */ (reader.readEnum());
      msg.setShardingColumnType(value);
      break;
    case 4:
      var value = new proto.topodata.SrvKeyspace.ServedFrom;
      reader.readMessage(value,proto.topodata.SrvKeyspace.ServedFrom.deserializeBinaryFromReader);
      msg.addServedFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.SrvKeyspace} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.SrvKeyspace.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.SrvKeyspace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.SrvKeyspace.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPartitionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.topodata.SrvKeyspace.KeyspacePartition.serializeBinaryToWriter
    );
  }
  f = this.getShardingColumnName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getShardingColumnType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getServedFromList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.topodata.SrvKeyspace.ServedFrom.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyspacePartition partitions = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.SrvKeyspace.KeyspacePartition>}
 */
proto.topodata.SrvKeyspace.prototype.getPartitionsList = function() {
  return /** @type{!Array.<!proto.topodata.SrvKeyspace.KeyspacePartition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.SrvKeyspace.KeyspacePartition, 1));
};


/** @param {!Array.<!proto.topodata.SrvKeyspace.KeyspacePartition>} value */
proto.topodata.SrvKeyspace.prototype.setPartitionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.topodata.SrvKeyspace.KeyspacePartition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.SrvKeyspace.KeyspacePartition}
 */
proto.topodata.SrvKeyspace.prototype.addPartitions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.topodata.SrvKeyspace.KeyspacePartition, opt_index);
};


proto.topodata.SrvKeyspace.prototype.clearPartitionsList = function() {
  this.setPartitionsList([]);
};


/**
 * optional string sharding_column_name = 2;
 * @return {string}
 */
proto.topodata.SrvKeyspace.prototype.getShardingColumnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.topodata.SrvKeyspace.prototype.setShardingColumnName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional KeyspaceIdType sharding_column_type = 3;
 * @return {!proto.topodata.KeyspaceIdType}
 */
proto.topodata.SrvKeyspace.prototype.getShardingColumnType = function() {
  return /** @type {!proto.topodata.KeyspaceIdType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.topodata.KeyspaceIdType} value */
proto.topodata.SrvKeyspace.prototype.setShardingColumnType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated ServedFrom served_from = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.SrvKeyspace.ServedFrom>}
 */
proto.topodata.SrvKeyspace.prototype.getServedFromList = function() {
  return /** @type{!Array.<!proto.topodata.SrvKeyspace.ServedFrom>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.SrvKeyspace.ServedFrom, 4));
};


/** @param {!Array.<!proto.topodata.SrvKeyspace.ServedFrom>} value */
proto.topodata.SrvKeyspace.prototype.setServedFromList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.topodata.SrvKeyspace.ServedFrom=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.SrvKeyspace.ServedFrom}
 */
proto.topodata.SrvKeyspace.prototype.addServedFrom = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.topodata.SrvKeyspace.ServedFrom, opt_index);
};


proto.topodata.SrvKeyspace.prototype.clearServedFromList = function() {
  this.setServedFromList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.SrvKeyspace.KeyspacePartition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.topodata.SrvKeyspace.KeyspacePartition.repeatedFields_, null);
};
goog.inherits(proto.topodata.SrvKeyspace.KeyspacePartition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.SrvKeyspace.KeyspacePartition.displayName = 'proto.topodata.SrvKeyspace.KeyspacePartition';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.topodata.SrvKeyspace.KeyspacePartition.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.SrvKeyspace.KeyspacePartition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.SrvKeyspace.KeyspacePartition} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.toObject = function(includeInstance, msg) {
  var f, obj = {
    servedType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    shardReferencesList: jspb.Message.toObjectList(msg.getShardReferencesList(),
    proto.topodata.ShardReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.SrvKeyspace.KeyspacePartition}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.SrvKeyspace.KeyspacePartition;
  return proto.topodata.SrvKeyspace.KeyspacePartition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.SrvKeyspace.KeyspacePartition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.SrvKeyspace.KeyspacePartition}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setServedType(value);
      break;
    case 2:
      var value = new proto.topodata.ShardReference;
      reader.readMessage(value,proto.topodata.ShardReference.deserializeBinaryFromReader);
      msg.addShardReferences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.SrvKeyspace.KeyspacePartition} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.SrvKeyspace.KeyspacePartition.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getServedType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getShardReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.topodata.ShardReference.serializeBinaryToWriter
    );
  }
};


/**
 * optional TabletType served_type = 1;
 * @return {!proto.topodata.TabletType}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.getServedType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.setServedType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ShardReference shard_references = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.ShardReference>}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.getShardReferencesList = function() {
  return /** @type{!Array.<!proto.topodata.ShardReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.topodata.ShardReference, 2));
};


/** @param {!Array.<!proto.topodata.ShardReference>} value */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.setShardReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.topodata.ShardReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.ShardReference}
 */
proto.topodata.SrvKeyspace.KeyspacePartition.prototype.addShardReferences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.topodata.ShardReference, opt_index);
};


proto.topodata.SrvKeyspace.KeyspacePartition.prototype.clearShardReferencesList = function() {
  this.setShardReferencesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.topodata.SrvKeyspace.ServedFrom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.topodata.SrvKeyspace.ServedFrom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.topodata.SrvKeyspace.ServedFrom.displayName = 'proto.topodata.SrvKeyspace.ServedFrom';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.topodata.SrvKeyspace.ServedFrom.prototype.toObject = function(opt_includeInstance) {
  return proto.topodata.SrvKeyspace.ServedFrom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.topodata.SrvKeyspace.ServedFrom} msg The msg instance to transform.
 * @return {!Object}
 */
proto.topodata.SrvKeyspace.ServedFrom.toObject = function(includeInstance, msg) {
  var f, obj = {
    tabletType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keyspace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.topodata.SrvKeyspace.ServedFrom}
 */
proto.topodata.SrvKeyspace.ServedFrom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.topodata.SrvKeyspace.ServedFrom;
  return proto.topodata.SrvKeyspace.ServedFrom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.topodata.SrvKeyspace.ServedFrom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.topodata.SrvKeyspace.ServedFrom}
 */
proto.topodata.SrvKeyspace.ServedFrom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.topodata.SrvKeyspace.ServedFrom} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.SrvKeyspace.ServedFrom.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.topodata.SrvKeyspace.ServedFrom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.topodata.SrvKeyspace.ServedFrom.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TabletType tablet_type = 1;
 * @return {!proto.topodata.TabletType}
 */
proto.topodata.SrvKeyspace.ServedFrom.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.topodata.SrvKeyspace.ServedFrom.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string keyspace = 2;
 * @return {string}
 */
proto.topodata.SrvKeyspace.ServedFrom.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.topodata.SrvKeyspace.ServedFrom.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.topodata.KeyspaceIdType = {
  UNSET: 0,
  UINT64: 1,
  BYTES: 2
};

/**
 * @enum {number}
 */
proto.topodata.TabletType = {
  UNKNOWN: 0,
  MASTER: 1,
  REPLICA: 2,
  RDONLY: 3,
  BATCH: 3,
  SPARE: 4,
  EXPERIMENTAL: 5,
  BACKUP: 6,
  RESTORE: 7,
  WORKER: 8
};

goog.object.extend(exports, proto.topodata);
