/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vttest.Keyspace', null, global);
goog.exportSymbol('proto.vttest.Shard', null, global);
goog.exportSymbol('proto.vttest.VTTestTopology', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vttest.Shard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vttest.Shard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vttest.Shard.displayName = 'proto.vttest.Shard';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vttest.Shard.prototype.toObject = function(opt_includeInstance) {
  return proto.vttest.Shard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vttest.Shard} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vttest.Shard.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dbNameOverride: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vttest.Shard}
 */
proto.vttest.Shard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vttest.Shard;
  return proto.vttest.Shard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vttest.Shard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vttest.Shard}
 */
proto.vttest.Shard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbNameOverride(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vttest.Shard} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vttest.Shard.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vttest.Shard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vttest.Shard.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDbNameOverride();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.vttest.Shard.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vttest.Shard.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string db_name_override = 2;
 * @return {string}
 */
proto.vttest.Shard.prototype.getDbNameOverride = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vttest.Shard.prototype.setDbNameOverride = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vttest.Keyspace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vttest.Keyspace.repeatedFields_, null);
};
goog.inherits(proto.vttest.Keyspace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vttest.Keyspace.displayName = 'proto.vttest.Keyspace';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vttest.Keyspace.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vttest.Keyspace.prototype.toObject = function(opt_includeInstance) {
  return proto.vttest.Keyspace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vttest.Keyspace} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vttest.Keyspace.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shardsList: jspb.Message.toObjectList(msg.getShardsList(),
    proto.vttest.Shard.toObject, includeInstance),
    shardingColumnName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shardingColumnType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    servedFrom: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vttest.Keyspace}
 */
proto.vttest.Keyspace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vttest.Keyspace;
  return proto.vttest.Keyspace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vttest.Keyspace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vttest.Keyspace}
 */
proto.vttest.Keyspace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.vttest.Shard;
      reader.readMessage(value,proto.vttest.Shard.deserializeBinaryFromReader);
      msg.addShards(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardingColumnName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardingColumnType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setServedFrom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vttest.Keyspace} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vttest.Keyspace.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vttest.Keyspace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vttest.Keyspace.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vttest.Shard.serializeBinaryToWriter
    );
  }
  f = this.getShardingColumnName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getShardingColumnType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getServedFrom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.vttest.Keyspace.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vttest.Keyspace.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Shard shards = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vttest.Shard>}
 */
proto.vttest.Keyspace.prototype.getShardsList = function() {
  return /** @type{!Array.<!proto.vttest.Shard>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vttest.Shard, 2));
};


/** @param {!Array.<!proto.vttest.Shard>} value */
proto.vttest.Keyspace.prototype.setShardsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vttest.Shard=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vttest.Shard}
 */
proto.vttest.Keyspace.prototype.addShards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vttest.Shard, opt_index);
};


proto.vttest.Keyspace.prototype.clearShardsList = function() {
  this.setShardsList([]);
};


/**
 * optional string sharding_column_name = 3;
 * @return {string}
 */
proto.vttest.Keyspace.prototype.getShardingColumnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vttest.Keyspace.prototype.setShardingColumnName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string sharding_column_type = 4;
 * @return {string}
 */
proto.vttest.Keyspace.prototype.getShardingColumnType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vttest.Keyspace.prototype.setShardingColumnType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string served_from = 5;
 * @return {string}
 */
proto.vttest.Keyspace.prototype.getServedFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.vttest.Keyspace.prototype.setServedFrom = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vttest.VTTestTopology = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vttest.VTTestTopology.repeatedFields_, null);
};
goog.inherits(proto.vttest.VTTestTopology, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vttest.VTTestTopology.displayName = 'proto.vttest.VTTestTopology';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vttest.VTTestTopology.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vttest.VTTestTopology.prototype.toObject = function(opt_includeInstance) {
  return proto.vttest.VTTestTopology.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vttest.VTTestTopology} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vttest.VTTestTopology.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspacesList: jspb.Message.toObjectList(msg.getKeyspacesList(),
    proto.vttest.Keyspace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vttest.VTTestTopology}
 */
proto.vttest.VTTestTopology.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vttest.VTTestTopology;
  return proto.vttest.VTTestTopology.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vttest.VTTestTopology} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vttest.VTTestTopology}
 */
proto.vttest.VTTestTopology.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vttest.Keyspace;
      reader.readMessage(value,proto.vttest.Keyspace.deserializeBinaryFromReader);
      msg.addKeyspaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vttest.VTTestTopology} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vttest.VTTestTopology.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vttest.VTTestTopology.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vttest.VTTestTopology.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyspacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vttest.Keyspace.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Keyspace keyspaces = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vttest.Keyspace>}
 */
proto.vttest.VTTestTopology.prototype.getKeyspacesList = function() {
  return /** @type{!Array.<!proto.vttest.Keyspace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vttest.Keyspace, 1));
};


/** @param {!Array.<!proto.vttest.Keyspace>} value */
proto.vttest.VTTestTopology.prototype.setKeyspacesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vttest.Keyspace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vttest.Keyspace}
 */
proto.vttest.VTTestTopology.prototype.addKeyspaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vttest.Keyspace, opt_index);
};


proto.vttest.VTTestTopology.prototype.clearKeyspacesList = function() {
  this.setKeyspacesList([]);
};


goog.object.extend(exports, proto.vttest);
