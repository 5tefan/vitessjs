/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.automation.ClusterOperation', null, global);
goog.exportSymbol('proto.automation.ClusterOperationState', null, global);
goog.exportSymbol('proto.automation.EnqueueClusterOperationRequest', null, global);
goog.exportSymbol('proto.automation.EnqueueClusterOperationResponse', null, global);
goog.exportSymbol('proto.automation.GetClusterOperationDetailsRequest', null, global);
goog.exportSymbol('proto.automation.GetClusterOperationDetailsResponse', null, global);
goog.exportSymbol('proto.automation.GetClusterOperationStateRequest', null, global);
goog.exportSymbol('proto.automation.GetClusterOperationStateResponse', null, global);
goog.exportSymbol('proto.automation.Task', null, global);
goog.exportSymbol('proto.automation.TaskContainer', null, global);
goog.exportSymbol('proto.automation.TaskState', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.ClusterOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.automation.ClusterOperation.repeatedFields_, null);
};
goog.inherits(proto.automation.ClusterOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.ClusterOperation.displayName = 'proto.automation.ClusterOperation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.automation.ClusterOperation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.ClusterOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.ClusterOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.ClusterOperation} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.ClusterOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serialTasksList: jspb.Message.toObjectList(msg.getSerialTasksList(),
    proto.automation.TaskContainer.toObject, includeInstance),
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    error: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.ClusterOperation}
 */
proto.automation.ClusterOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.ClusterOperation;
  return proto.automation.ClusterOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.ClusterOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.ClusterOperation}
 */
proto.automation.ClusterOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.automation.TaskContainer;
      reader.readMessage(value,proto.automation.TaskContainer.deserializeBinaryFromReader);
      msg.addSerialTasks(value);
      break;
    case 3:
      var value = /** @type {!proto.automation.ClusterOperationState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.ClusterOperation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.ClusterOperation.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.ClusterOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.ClusterOperation.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSerialTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.automation.TaskContainer.serializeBinaryToWriter
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.automation.ClusterOperation.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.automation.ClusterOperation.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated TaskContainer serial_tasks = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.automation.TaskContainer>}
 */
proto.automation.ClusterOperation.prototype.getSerialTasksList = function() {
  return /** @type{!Array.<!proto.automation.TaskContainer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.automation.TaskContainer, 2));
};


/** @param {!Array.<!proto.automation.TaskContainer>} value */
proto.automation.ClusterOperation.prototype.setSerialTasksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.automation.TaskContainer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.automation.TaskContainer}
 */
proto.automation.ClusterOperation.prototype.addSerialTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.automation.TaskContainer, opt_index);
};


proto.automation.ClusterOperation.prototype.clearSerialTasksList = function() {
  this.setSerialTasksList([]);
};


/**
 * optional ClusterOperationState state = 3;
 * @return {!proto.automation.ClusterOperationState}
 */
proto.automation.ClusterOperation.prototype.getState = function() {
  return /** @type {!proto.automation.ClusterOperationState} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.automation.ClusterOperationState} value */
proto.automation.ClusterOperation.prototype.setState = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string error = 4;
 * @return {string}
 */
proto.automation.ClusterOperation.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.automation.ClusterOperation.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.TaskContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.automation.TaskContainer.repeatedFields_, null);
};
goog.inherits(proto.automation.TaskContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.TaskContainer.displayName = 'proto.automation.TaskContainer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.automation.TaskContainer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.TaskContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.TaskContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.TaskContainer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.TaskContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    parallelTasksList: jspb.Message.toObjectList(msg.getParallelTasksList(),
    proto.automation.Task.toObject, includeInstance),
    concurrency: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.TaskContainer}
 */
proto.automation.TaskContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.TaskContainer;
  return proto.automation.TaskContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.TaskContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.TaskContainer}
 */
proto.automation.TaskContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.automation.Task;
      reader.readMessage(value,proto.automation.Task.deserializeBinaryFromReader);
      msg.addParallelTasks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConcurrency(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.TaskContainer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.TaskContainer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.TaskContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.TaskContainer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getParallelTasksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.automation.Task.serializeBinaryToWriter
    );
  }
  f = this.getConcurrency();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Task parallel_tasks = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.automation.Task>}
 */
proto.automation.TaskContainer.prototype.getParallelTasksList = function() {
  return /** @type{!Array.<!proto.automation.Task>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.automation.Task, 1));
};


/** @param {!Array.<!proto.automation.Task>} value */
proto.automation.TaskContainer.prototype.setParallelTasksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.automation.Task=} opt_value
 * @param {number=} opt_index
 * @return {!proto.automation.Task}
 */
proto.automation.TaskContainer.prototype.addParallelTasks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.automation.Task, opt_index);
};


proto.automation.TaskContainer.prototype.clearParallelTasksList = function() {
  this.setParallelTasksList([]);
};


/**
 * optional int32 concurrency = 2;
 * @return {number}
 */
proto.automation.TaskContainer.prototype.getConcurrency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.automation.TaskContainer.prototype.setConcurrency = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.Task = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.Task, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.Task.displayName = 'proto.automation.Task';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.Task.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.Task.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.Task} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.Task.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parametersMap: (f = msg.getParametersMap()) ? f.toArray() : [],
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    output: jspb.Message.getFieldWithDefault(msg, 5, ""),
    error: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.Task}
 */
proto.automation.Task.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.Task;
  return proto.automation.Task.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.Task} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.Task}
 */
proto.automation.Task.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = /** @type {!proto.automation.TaskState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.Task} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.Task.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.Task.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.Task.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getOutput();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.automation.Task.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.automation.Task.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, string> parameters = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.automation.Task.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.automation.Task.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.automation.Task.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.automation.Task.prototype.setId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional TaskState state = 4;
 * @return {!proto.automation.TaskState}
 */
proto.automation.Task.prototype.getState = function() {
  return /** @type {!proto.automation.TaskState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.automation.TaskState} value */
proto.automation.Task.prototype.setState = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string output = 5;
 * @return {string}
 */
proto.automation.Task.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.automation.Task.prototype.setOutput = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string error = 6;
 * @return {string}
 */
proto.automation.Task.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.automation.Task.prototype.setError = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.EnqueueClusterOperationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.EnqueueClusterOperationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.EnqueueClusterOperationRequest.displayName = 'proto.automation.EnqueueClusterOperationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.EnqueueClusterOperationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.EnqueueClusterOperationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.EnqueueClusterOperationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.EnqueueClusterOperationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    parametersMap: (f = msg.getParametersMap()) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.EnqueueClusterOperationRequest}
 */
proto.automation.EnqueueClusterOperationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.EnqueueClusterOperationRequest;
  return proto.automation.EnqueueClusterOperationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.EnqueueClusterOperationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.EnqueueClusterOperationRequest}
 */
proto.automation.EnqueueClusterOperationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getParametersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.EnqueueClusterOperationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.EnqueueClusterOperationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.EnqueueClusterOperationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.EnqueueClusterOperationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getParametersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.automation.EnqueueClusterOperationRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.automation.EnqueueClusterOperationRequest.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, string> parameters = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.automation.EnqueueClusterOperationRequest.prototype.getParametersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.automation.EnqueueClusterOperationRequest.prototype.clearParametersMap = function() {
  this.getParametersMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.EnqueueClusterOperationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.EnqueueClusterOperationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.EnqueueClusterOperationResponse.displayName = 'proto.automation.EnqueueClusterOperationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.EnqueueClusterOperationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.EnqueueClusterOperationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.EnqueueClusterOperationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.EnqueueClusterOperationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.EnqueueClusterOperationResponse}
 */
proto.automation.EnqueueClusterOperationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.EnqueueClusterOperationResponse;
  return proto.automation.EnqueueClusterOperationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.EnqueueClusterOperationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.EnqueueClusterOperationResponse}
 */
proto.automation.EnqueueClusterOperationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.EnqueueClusterOperationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.EnqueueClusterOperationResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.EnqueueClusterOperationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.EnqueueClusterOperationResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.automation.EnqueueClusterOperationResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.automation.EnqueueClusterOperationResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.GetClusterOperationStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.GetClusterOperationStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.GetClusterOperationStateRequest.displayName = 'proto.automation.GetClusterOperationStateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.GetClusterOperationStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.GetClusterOperationStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.GetClusterOperationStateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.GetClusterOperationStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.GetClusterOperationStateRequest}
 */
proto.automation.GetClusterOperationStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.GetClusterOperationStateRequest;
  return proto.automation.GetClusterOperationStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.GetClusterOperationStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.GetClusterOperationStateRequest}
 */
proto.automation.GetClusterOperationStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.GetClusterOperationStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationStateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.GetClusterOperationStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationStateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.automation.GetClusterOperationStateRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.automation.GetClusterOperationStateRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.GetClusterOperationStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.GetClusterOperationStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.GetClusterOperationStateResponse.displayName = 'proto.automation.GetClusterOperationStateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.GetClusterOperationStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.GetClusterOperationStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.GetClusterOperationStateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.GetClusterOperationStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.GetClusterOperationStateResponse}
 */
proto.automation.GetClusterOperationStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.GetClusterOperationStateResponse;
  return proto.automation.GetClusterOperationStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.GetClusterOperationStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.GetClusterOperationStateResponse}
 */
proto.automation.GetClusterOperationStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.automation.ClusterOperationState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.GetClusterOperationStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationStateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.GetClusterOperationStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationStateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ClusterOperationState state = 1;
 * @return {!proto.automation.ClusterOperationState}
 */
proto.automation.GetClusterOperationStateResponse.prototype.getState = function() {
  return /** @type {!proto.automation.ClusterOperationState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.automation.ClusterOperationState} value */
proto.automation.GetClusterOperationStateResponse.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.GetClusterOperationDetailsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.GetClusterOperationDetailsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.GetClusterOperationDetailsRequest.displayName = 'proto.automation.GetClusterOperationDetailsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.GetClusterOperationDetailsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.GetClusterOperationDetailsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.GetClusterOperationDetailsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.GetClusterOperationDetailsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.GetClusterOperationDetailsRequest}
 */
proto.automation.GetClusterOperationDetailsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.GetClusterOperationDetailsRequest;
  return proto.automation.GetClusterOperationDetailsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.GetClusterOperationDetailsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.GetClusterOperationDetailsRequest}
 */
proto.automation.GetClusterOperationDetailsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.GetClusterOperationDetailsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationDetailsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.GetClusterOperationDetailsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationDetailsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.automation.GetClusterOperationDetailsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.automation.GetClusterOperationDetailsRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.automation.GetClusterOperationDetailsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.automation.GetClusterOperationDetailsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.automation.GetClusterOperationDetailsResponse.displayName = 'proto.automation.GetClusterOperationDetailsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.automation.GetClusterOperationDetailsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.automation.GetClusterOperationDetailsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.automation.GetClusterOperationDetailsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.automation.GetClusterOperationDetailsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterOp: (f = msg.getClusterOp()) && proto.automation.ClusterOperation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.automation.GetClusterOperationDetailsResponse}
 */
proto.automation.GetClusterOperationDetailsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.automation.GetClusterOperationDetailsResponse;
  return proto.automation.GetClusterOperationDetailsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.automation.GetClusterOperationDetailsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.automation.GetClusterOperationDetailsResponse}
 */
proto.automation.GetClusterOperationDetailsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.automation.ClusterOperation;
      reader.readMessage(value,proto.automation.ClusterOperation.deserializeBinaryFromReader);
      msg.setClusterOp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.automation.GetClusterOperationDetailsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationDetailsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.automation.GetClusterOperationDetailsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.automation.GetClusterOperationDetailsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClusterOp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.automation.ClusterOperation.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClusterOperation cluster_op = 2;
 * @return {?proto.automation.ClusterOperation}
 */
proto.automation.GetClusterOperationDetailsResponse.prototype.getClusterOp = function() {
  return /** @type{?proto.automation.ClusterOperation} */ (
    jspb.Message.getWrapperField(this, proto.automation.ClusterOperation, 2));
};


/** @param {?proto.automation.ClusterOperation|undefined} value */
proto.automation.GetClusterOperationDetailsResponse.prototype.setClusterOp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.automation.GetClusterOperationDetailsResponse.prototype.clearClusterOp = function() {
  this.setClusterOp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.automation.GetClusterOperationDetailsResponse.prototype.hasClusterOp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.automation.ClusterOperationState = {
  UNKNOWN_CLUSTER_OPERATION_STATE: 0,
  CLUSTER_OPERATION_NOT_STARTED: 1,
  CLUSTER_OPERATION_RUNNING: 2,
  CLUSTER_OPERATION_DONE: 3
};

/**
 * @enum {number}
 */
proto.automation.TaskState = {
  UNKNOWN_TASK_STATE: 0,
  NOT_STARTED: 1,
  RUNNING: 2,
  DONE: 3
};

goog.object.extend(exports, proto.automation);
