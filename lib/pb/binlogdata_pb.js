/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var query_pb = require('./query_pb.js');
var topodata_pb = require('./topodata_pb.js');
goog.exportSymbol('proto.binlogdata.BinlogTransaction', null, global);
goog.exportSymbol('proto.binlogdata.BinlogTransaction.Statement', null, global);
goog.exportSymbol('proto.binlogdata.BinlogTransaction.Statement.Category', null, global);
goog.exportSymbol('proto.binlogdata.Charset', null, global);
goog.exportSymbol('proto.binlogdata.StreamEvent', null, global);
goog.exportSymbol('proto.binlogdata.StreamEvent.Category', null, global);
goog.exportSymbol('proto.binlogdata.StreamKeyRangeRequest', null, global);
goog.exportSymbol('proto.binlogdata.StreamKeyRangeResponse', null, global);
goog.exportSymbol('proto.binlogdata.StreamTablesRequest', null, global);
goog.exportSymbol('proto.binlogdata.StreamTablesResponse', null, global);
goog.exportSymbol('proto.binlogdata.StreamUpdateRequest', null, global);
goog.exportSymbol('proto.binlogdata.StreamUpdateResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.Charset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.Charset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.Charset.displayName = 'proto.binlogdata.Charset';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.Charset.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.Charset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.Charset} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.Charset.toObject = function(includeInstance, msg) {
  var f, obj = {
    client: jspb.Message.getFieldWithDefault(msg, 1, 0),
    conn: jspb.Message.getFieldWithDefault(msg, 2, 0),
    server: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.Charset}
 */
proto.binlogdata.Charset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.Charset;
  return proto.binlogdata.Charset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.Charset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.Charset}
 */
proto.binlogdata.Charset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConn(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.Charset} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.Charset.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.Charset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.Charset.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getClient();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getConn();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getServer();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 client = 1;
 * @return {number}
 */
proto.binlogdata.Charset.prototype.getClient = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.binlogdata.Charset.prototype.setClient = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 conn = 2;
 * @return {number}
 */
proto.binlogdata.Charset.prototype.getConn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.binlogdata.Charset.prototype.setConn = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 server = 3;
 * @return {number}
 */
proto.binlogdata.Charset.prototype.getServer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.binlogdata.Charset.prototype.setServer = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.BinlogTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.binlogdata.BinlogTransaction.repeatedFields_, null);
};
goog.inherits(proto.binlogdata.BinlogTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.BinlogTransaction.displayName = 'proto.binlogdata.BinlogTransaction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.binlogdata.BinlogTransaction.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.BinlogTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.BinlogTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.BinlogTransaction} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.BinlogTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    statementsList: jspb.Message.toObjectList(msg.getStatementsList(),
    proto.binlogdata.BinlogTransaction.Statement.toObject, includeInstance),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transactionId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.BinlogTransaction}
 */
proto.binlogdata.BinlogTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.BinlogTransaction;
  return proto.binlogdata.BinlogTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.BinlogTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.BinlogTransaction}
 */
proto.binlogdata.BinlogTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.binlogdata.BinlogTransaction.Statement;
      reader.readMessage(value,proto.binlogdata.BinlogTransaction.Statement.deserializeBinaryFromReader);
      msg.addStatements(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.BinlogTransaction} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.BinlogTransaction.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.BinlogTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.BinlogTransaction.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.binlogdata.BinlogTransaction.Statement.serializeBinaryToWriter
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated Statement statements = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.binlogdata.BinlogTransaction.Statement>}
 */
proto.binlogdata.BinlogTransaction.prototype.getStatementsList = function() {
  return /** @type{!Array.<!proto.binlogdata.BinlogTransaction.Statement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.binlogdata.BinlogTransaction.Statement, 1));
};


/** @param {!Array.<!proto.binlogdata.BinlogTransaction.Statement>} value */
proto.binlogdata.BinlogTransaction.prototype.setStatementsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.binlogdata.BinlogTransaction.Statement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.binlogdata.BinlogTransaction.Statement}
 */
proto.binlogdata.BinlogTransaction.prototype.addStatements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.binlogdata.BinlogTransaction.Statement, opt_index);
};


proto.binlogdata.BinlogTransaction.prototype.clearStatementsList = function() {
  this.setStatementsList([]);
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.binlogdata.BinlogTransaction.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.binlogdata.BinlogTransaction.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string transaction_id = 3;
 * @return {string}
 */
proto.binlogdata.BinlogTransaction.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.binlogdata.BinlogTransaction.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.BinlogTransaction.Statement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.BinlogTransaction.Statement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.BinlogTransaction.Statement.displayName = 'proto.binlogdata.BinlogTransaction.Statement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.BinlogTransaction.Statement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.BinlogTransaction.Statement} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.BinlogTransaction.Statement.toObject = function(includeInstance, msg) {
  var f, obj = {
    category: jspb.Message.getFieldWithDefault(msg, 1, 0),
    charset: (f = msg.getCharset()) && proto.binlogdata.Charset.toObject(includeInstance, f),
    sql: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.BinlogTransaction.Statement}
 */
proto.binlogdata.BinlogTransaction.Statement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.BinlogTransaction.Statement;
  return proto.binlogdata.BinlogTransaction.Statement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.BinlogTransaction.Statement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.BinlogTransaction.Statement}
 */
proto.binlogdata.BinlogTransaction.Statement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.binlogdata.BinlogTransaction.Statement.Category} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    case 2:
      var value = new proto.binlogdata.Charset;
      reader.readMessage(value,proto.binlogdata.Charset.deserializeBinaryFromReader);
      msg.setCharset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.BinlogTransaction.Statement} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.BinlogTransaction.Statement.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getCharset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.binlogdata.Charset.serializeBinaryToWriter
    );
  }
  f = this.getSql();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Category category = 1;
 * @return {!proto.binlogdata.BinlogTransaction.Statement.Category}
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.getCategory = function() {
  return /** @type {!proto.binlogdata.BinlogTransaction.Statement.Category} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.binlogdata.BinlogTransaction.Statement.Category} value */
proto.binlogdata.BinlogTransaction.Statement.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Charset charset = 2;
 * @return {?proto.binlogdata.Charset}
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.getCharset = function() {
  return /** @type{?proto.binlogdata.Charset} */ (
    jspb.Message.getWrapperField(this, proto.binlogdata.Charset, 2));
};


/** @param {?proto.binlogdata.Charset|undefined} value */
proto.binlogdata.BinlogTransaction.Statement.prototype.setCharset = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.binlogdata.BinlogTransaction.Statement.prototype.clearCharset = function() {
  this.setCharset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.hasCharset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string sql = 3;
 * @return {string}
 */
proto.binlogdata.BinlogTransaction.Statement.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.binlogdata.BinlogTransaction.Statement.prototype.setSql = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.binlogdata.BinlogTransaction.Statement.Category = {
  BL_UNRECOGNIZED: 0,
  BL_BEGIN: 1,
  BL_COMMIT: 2,
  BL_ROLLBACK: 3,
  BL_DML: 4,
  BL_DDL: 5,
  BL_SET: 6
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.binlogdata.StreamEvent.repeatedFields_, null);
};
goog.inherits(proto.binlogdata.StreamEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamEvent.displayName = 'proto.binlogdata.StreamEvent';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.binlogdata.StreamEvent.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    category: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tableName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    primaryKeyFieldsList: jspb.Message.toObjectList(msg.getPrimaryKeyFieldsList(),
    query_pb.Field.toObject, includeInstance),
    primaryKeyValuesList: jspb.Message.toObjectList(msg.getPrimaryKeyValuesList(),
    query_pb.Row.toObject, includeInstance),
    sql: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    transactionId: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamEvent}
 */
proto.binlogdata.StreamEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamEvent;
  return proto.binlogdata.StreamEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamEvent}
 */
proto.binlogdata.StreamEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.binlogdata.StreamEvent.Category} */ (reader.readEnum());
      msg.setCategory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 3:
      var value = new query_pb.Field;
      reader.readMessage(value,query_pb.Field.deserializeBinaryFromReader);
      msg.addPrimaryKeyFields(value);
      break;
    case 4:
      var value = new query_pb.Row;
      reader.readMessage(value,query_pb.Row.deserializeBinaryFromReader);
      msg.addPrimaryKeyValues(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSql(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCategory();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getTableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPrimaryKeyFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      query_pb.Field.serializeBinaryToWriter
    );
  }
  f = this.getPrimaryKeyValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      query_pb.Row.serializeBinaryToWriter
    );
  }
  f = this.getSql();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getTransactionId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional Category category = 1;
 * @return {!proto.binlogdata.StreamEvent.Category}
 */
proto.binlogdata.StreamEvent.prototype.getCategory = function() {
  return /** @type {!proto.binlogdata.StreamEvent.Category} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.binlogdata.StreamEvent.Category} value */
proto.binlogdata.StreamEvent.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string table_name = 2;
 * @return {string}
 */
proto.binlogdata.StreamEvent.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.binlogdata.StreamEvent.prototype.setTableName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated query.Field primary_key_fields = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.Field>}
 */
proto.binlogdata.StreamEvent.prototype.getPrimaryKeyFieldsList = function() {
  return /** @type{!Array.<!proto.query.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, query_pb.Field, 3));
};


/** @param {!Array.<!proto.query.Field>} value */
proto.binlogdata.StreamEvent.prototype.setPrimaryKeyFieldsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.query.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.Field}
 */
proto.binlogdata.StreamEvent.prototype.addPrimaryKeyFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.query.Field, opt_index);
};


proto.binlogdata.StreamEvent.prototype.clearPrimaryKeyFieldsList = function() {
  this.setPrimaryKeyFieldsList([]);
};


/**
 * repeated query.Row primary_key_values = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.Row>}
 */
proto.binlogdata.StreamEvent.prototype.getPrimaryKeyValuesList = function() {
  return /** @type{!Array.<!proto.query.Row>} */ (
    jspb.Message.getRepeatedWrapperField(this, query_pb.Row, 4));
};


/** @param {!Array.<!proto.query.Row>} value */
proto.binlogdata.StreamEvent.prototype.setPrimaryKeyValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.query.Row=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.Row}
 */
proto.binlogdata.StreamEvent.prototype.addPrimaryKeyValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.query.Row, opt_index);
};


proto.binlogdata.StreamEvent.prototype.clearPrimaryKeyValuesList = function() {
  this.setPrimaryKeyValuesList([]);
};


/**
 * optional string sql = 5;
 * @return {string}
 */
proto.binlogdata.StreamEvent.prototype.getSql = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.binlogdata.StreamEvent.prototype.setSql = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 timestamp = 6;
 * @return {number}
 */
proto.binlogdata.StreamEvent.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.binlogdata.StreamEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string transaction_id = 7;
 * @return {string}
 */
proto.binlogdata.StreamEvent.prototype.getTransactionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.binlogdata.StreamEvent.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.binlogdata.StreamEvent.Category = {
  SE_ERR: 0,
  SE_DML: 1,
  SE_DDL: 2,
  SE_POS: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.StreamUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamUpdateRequest.displayName = 'proto.binlogdata.StreamUpdateRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamUpdateRequest}
 */
proto.binlogdata.StreamUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamUpdateRequest;
  return proto.binlogdata.StreamUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamUpdateRequest}
 */
proto.binlogdata.StreamUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamUpdateRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPosition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string position = 1;
 * @return {string}
 */
proto.binlogdata.StreamUpdateRequest.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.binlogdata.StreamUpdateRequest.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.StreamUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamUpdateResponse.displayName = 'proto.binlogdata.StreamUpdateResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    streamEvent: (f = msg.getStreamEvent()) && proto.binlogdata.StreamEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamUpdateResponse}
 */
proto.binlogdata.StreamUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamUpdateResponse;
  return proto.binlogdata.StreamUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamUpdateResponse}
 */
proto.binlogdata.StreamUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.binlogdata.StreamEvent;
      reader.readMessage(value,proto.binlogdata.StreamEvent.deserializeBinaryFromReader);
      msg.setStreamEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamUpdateResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStreamEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.binlogdata.StreamEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional StreamEvent stream_event = 1;
 * @return {?proto.binlogdata.StreamEvent}
 */
proto.binlogdata.StreamUpdateResponse.prototype.getStreamEvent = function() {
  return /** @type{?proto.binlogdata.StreamEvent} */ (
    jspb.Message.getWrapperField(this, proto.binlogdata.StreamEvent, 1));
};


/** @param {?proto.binlogdata.StreamEvent|undefined} value */
proto.binlogdata.StreamUpdateResponse.prototype.setStreamEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.binlogdata.StreamUpdateResponse.prototype.clearStreamEvent = function() {
  this.setStreamEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.StreamUpdateResponse.prototype.hasStreamEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamKeyRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.StreamKeyRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamKeyRangeRequest.displayName = 'proto.binlogdata.StreamKeyRangeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamKeyRangeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamKeyRangeRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamKeyRangeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyRange: (f = msg.getKeyRange()) && topodata_pb.KeyRange.toObject(includeInstance, f),
    charset: (f = msg.getCharset()) && proto.binlogdata.Charset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamKeyRangeRequest}
 */
proto.binlogdata.StreamKeyRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamKeyRangeRequest;
  return proto.binlogdata.StreamKeyRangeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamKeyRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamKeyRangeRequest}
 */
proto.binlogdata.StreamKeyRangeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 2:
      var value = new topodata_pb.KeyRange;
      reader.readMessage(value,topodata_pb.KeyRange.deserializeBinaryFromReader);
      msg.setKeyRange(value);
      break;
    case 3:
      var value = new proto.binlogdata.Charset;
      reader.readMessage(value,proto.binlogdata.Charset.deserializeBinaryFromReader);
      msg.setCharset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamKeyRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamKeyRangeRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPosition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getKeyRange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      topodata_pb.KeyRange.serializeBinaryToWriter
    );
  }
  f = this.getCharset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.binlogdata.Charset.serializeBinaryToWriter
    );
  }
};


/**
 * optional string position = 1;
 * @return {string}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.binlogdata.StreamKeyRangeRequest.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional topodata.KeyRange key_range = 2;
 * @return {?proto.topodata.KeyRange}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.getKeyRange = function() {
  return /** @type{?proto.topodata.KeyRange} */ (
    jspb.Message.getWrapperField(this, topodata_pb.KeyRange, 2));
};


/** @param {?proto.topodata.KeyRange|undefined} value */
proto.binlogdata.StreamKeyRangeRequest.prototype.setKeyRange = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.binlogdata.StreamKeyRangeRequest.prototype.clearKeyRange = function() {
  this.setKeyRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.hasKeyRange = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Charset charset = 3;
 * @return {?proto.binlogdata.Charset}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.getCharset = function() {
  return /** @type{?proto.binlogdata.Charset} */ (
    jspb.Message.getWrapperField(this, proto.binlogdata.Charset, 3));
};


/** @param {?proto.binlogdata.Charset|undefined} value */
proto.binlogdata.StreamKeyRangeRequest.prototype.setCharset = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.binlogdata.StreamKeyRangeRequest.prototype.clearCharset = function() {
  this.setCharset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.StreamKeyRangeRequest.prototype.hasCharset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamKeyRangeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.StreamKeyRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamKeyRangeResponse.displayName = 'proto.binlogdata.StreamKeyRangeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamKeyRangeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamKeyRangeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamKeyRangeResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamKeyRangeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    binlogTransaction: (f = msg.getBinlogTransaction()) && proto.binlogdata.BinlogTransaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamKeyRangeResponse}
 */
proto.binlogdata.StreamKeyRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamKeyRangeResponse;
  return proto.binlogdata.StreamKeyRangeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamKeyRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamKeyRangeResponse}
 */
proto.binlogdata.StreamKeyRangeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.binlogdata.BinlogTransaction;
      reader.readMessage(value,proto.binlogdata.BinlogTransaction.deserializeBinaryFromReader);
      msg.setBinlogTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamKeyRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamKeyRangeResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamKeyRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamKeyRangeResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBinlogTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.binlogdata.BinlogTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional BinlogTransaction binlog_transaction = 1;
 * @return {?proto.binlogdata.BinlogTransaction}
 */
proto.binlogdata.StreamKeyRangeResponse.prototype.getBinlogTransaction = function() {
  return /** @type{?proto.binlogdata.BinlogTransaction} */ (
    jspb.Message.getWrapperField(this, proto.binlogdata.BinlogTransaction, 1));
};


/** @param {?proto.binlogdata.BinlogTransaction|undefined} value */
proto.binlogdata.StreamKeyRangeResponse.prototype.setBinlogTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.binlogdata.StreamKeyRangeResponse.prototype.clearBinlogTransaction = function() {
  this.setBinlogTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.StreamKeyRangeResponse.prototype.hasBinlogTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamTablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.binlogdata.StreamTablesRequest.repeatedFields_, null);
};
goog.inherits(proto.binlogdata.StreamTablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamTablesRequest.displayName = 'proto.binlogdata.StreamTablesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.binlogdata.StreamTablesRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamTablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamTablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamTablesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamTablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tablesList: jspb.Message.getField(msg, 2),
    charset: (f = msg.getCharset()) && proto.binlogdata.Charset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamTablesRequest}
 */
proto.binlogdata.StreamTablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamTablesRequest;
  return proto.binlogdata.StreamTablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamTablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamTablesRequest}
 */
proto.binlogdata.StreamTablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTables(value);
      break;
    case 3:
      var value = new proto.binlogdata.Charset;
      reader.readMessage(value,proto.binlogdata.Charset.deserializeBinaryFromReader);
      msg.setCharset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamTablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamTablesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamTablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamTablesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPosition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getCharset();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.binlogdata.Charset.serializeBinaryToWriter
    );
  }
};


/**
 * optional string position = 1;
 * @return {string}
 */
proto.binlogdata.StreamTablesRequest.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.binlogdata.StreamTablesRequest.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string tables = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.binlogdata.StreamTablesRequest.prototype.getTablesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.binlogdata.StreamTablesRequest.prototype.setTablesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.binlogdata.StreamTablesRequest.prototype.addTables = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.binlogdata.StreamTablesRequest.prototype.clearTablesList = function() {
  this.setTablesList([]);
};


/**
 * optional Charset charset = 3;
 * @return {?proto.binlogdata.Charset}
 */
proto.binlogdata.StreamTablesRequest.prototype.getCharset = function() {
  return /** @type{?proto.binlogdata.Charset} */ (
    jspb.Message.getWrapperField(this, proto.binlogdata.Charset, 3));
};


/** @param {?proto.binlogdata.Charset|undefined} value */
proto.binlogdata.StreamTablesRequest.prototype.setCharset = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.binlogdata.StreamTablesRequest.prototype.clearCharset = function() {
  this.setCharset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.StreamTablesRequest.prototype.hasCharset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.binlogdata.StreamTablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.binlogdata.StreamTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.binlogdata.StreamTablesResponse.displayName = 'proto.binlogdata.StreamTablesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.binlogdata.StreamTablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.binlogdata.StreamTablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.binlogdata.StreamTablesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.binlogdata.StreamTablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    binlogTransaction: (f = msg.getBinlogTransaction()) && proto.binlogdata.BinlogTransaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.binlogdata.StreamTablesResponse}
 */
proto.binlogdata.StreamTablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.binlogdata.StreamTablesResponse;
  return proto.binlogdata.StreamTablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.binlogdata.StreamTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.binlogdata.StreamTablesResponse}
 */
proto.binlogdata.StreamTablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.binlogdata.BinlogTransaction;
      reader.readMessage(value,proto.binlogdata.BinlogTransaction.deserializeBinaryFromReader);
      msg.setBinlogTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.binlogdata.StreamTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamTablesResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.binlogdata.StreamTablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.binlogdata.StreamTablesResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBinlogTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.binlogdata.BinlogTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional BinlogTransaction binlog_transaction = 1;
 * @return {?proto.binlogdata.BinlogTransaction}
 */
proto.binlogdata.StreamTablesResponse.prototype.getBinlogTransaction = function() {
  return /** @type{?proto.binlogdata.BinlogTransaction} */ (
    jspb.Message.getWrapperField(this, proto.binlogdata.BinlogTransaction, 1));
};


/** @param {?proto.binlogdata.BinlogTransaction|undefined} value */
proto.binlogdata.StreamTablesResponse.prototype.setBinlogTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.binlogdata.StreamTablesResponse.prototype.clearBinlogTransaction = function() {
  this.setBinlogTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.binlogdata.StreamTablesResponse.prototype.hasBinlogTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.binlogdata);
