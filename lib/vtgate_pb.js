/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var query_pb = require('./query_pb.js');
var topodata_pb = require('./topodata_pb.js');
var vtrpc_pb = require('./vtrpc_pb.js');
goog.exportSymbol('proto.vtgate.BeginRequest', null, global);
goog.exportSymbol('proto.vtgate.BeginResponse', null, global);
goog.exportSymbol('proto.vtgate.BoundKeyspaceIdQuery', null, global);
goog.exportSymbol('proto.vtgate.BoundShardQuery', null, global);
goog.exportSymbol('proto.vtgate.CommitRequest', null, global);
goog.exportSymbol('proto.vtgate.CommitResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteBatchKeyspaceIdsRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteBatchKeyspaceIdsResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteBatchShardsRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteBatchShardsResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteEntityIdsRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteEntityIdsRequest.EntityId', null, global);
goog.exportSymbol('proto.vtgate.ExecuteEntityIdsResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteKeyRangesRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteKeyRangesResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteKeyspaceIdsRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteKeyspaceIdsResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteResponse', null, global);
goog.exportSymbol('proto.vtgate.ExecuteShardsRequest', null, global);
goog.exportSymbol('proto.vtgate.ExecuteShardsResponse', null, global);
goog.exportSymbol('proto.vtgate.GetSrvKeyspaceRequest', null, global);
goog.exportSymbol('proto.vtgate.GetSrvKeyspaceResponse', null, global);
goog.exportSymbol('proto.vtgate.RollbackRequest', null, global);
goog.exportSymbol('proto.vtgate.RollbackResponse', null, global);
goog.exportSymbol('proto.vtgate.Session', null, global);
goog.exportSymbol('proto.vtgate.Session.ShardSession', null, global);
goog.exportSymbol('proto.vtgate.SplitQueryRequest', null, global);
goog.exportSymbol('proto.vtgate.SplitQueryResponse', null, global);
goog.exportSymbol('proto.vtgate.SplitQueryResponse.KeyRangePart', null, global);
goog.exportSymbol('proto.vtgate.SplitQueryResponse.Part', null, global);
goog.exportSymbol('proto.vtgate.SplitQueryResponse.ShardPart', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteKeyRangesRequest', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteKeyRangesResponse', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteKeyspaceIdsRequest', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteKeyspaceIdsResponse', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteRequest', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteResponse', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteShardsRequest', null, global);
goog.exportSymbol('proto.vtgate.StreamExecuteShardsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.Session.repeatedFields_, null);
};
goog.inherits(proto.vtgate.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.Session.displayName = 'proto.vtgate.Session';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.Session.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.Session} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    inTransaction: jspb.Message.getFieldWithDefault(msg, 1, false),
    shardSessionsList: jspb.Message.toObjectList(msg.getShardSessionsList(),
    proto.vtgate.Session.ShardSession.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.Session}
 */
proto.vtgate.Session.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.Session;
  return proto.vtgate.Session.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.Session} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.Session}
 */
proto.vtgate.Session.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInTransaction(value);
      break;
    case 2:
      var value = new proto.vtgate.Session.ShardSession;
      reader.readMessage(value,proto.vtgate.Session.ShardSession.deserializeBinaryFromReader);
      msg.addShardSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.Session} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.Session.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.Session.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.Session.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getInTransaction();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getShardSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vtgate.Session.ShardSession.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool in_transaction = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.Session.prototype.getInTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.vtgate.Session.prototype.setInTransaction = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ShardSession shard_sessions = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vtgate.Session.ShardSession>}
 */
proto.vtgate.Session.prototype.getShardSessionsList = function() {
  return /** @type{!Array.<!proto.vtgate.Session.ShardSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vtgate.Session.ShardSession, 2));
};


/** @param {!Array.<!proto.vtgate.Session.ShardSession>} value */
proto.vtgate.Session.prototype.setShardSessionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vtgate.Session.ShardSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vtgate.Session.ShardSession}
 */
proto.vtgate.Session.prototype.addShardSessions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vtgate.Session.ShardSession, opt_index);
};


proto.vtgate.Session.prototype.clearShardSessionsList = function() {
  this.setShardSessionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.Session.ShardSession = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.Session.ShardSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.Session.ShardSession.displayName = 'proto.vtgate.Session.ShardSession';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.Session.ShardSession.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.Session.ShardSession.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.Session.ShardSession} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.Session.ShardSession.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: (f = msg.getTarget()) && query_pb.Target.toObject(includeInstance, f),
    transactionId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.Session.ShardSession}
 */
proto.vtgate.Session.ShardSession.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.Session.ShardSession;
  return proto.vtgate.Session.ShardSession.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.Session.ShardSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.Session.ShardSession}
 */
proto.vtgate.Session.ShardSession.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.Target;
      reader.readMessage(value,query_pb.Target.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.Session.ShardSession} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.Session.ShardSession.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.Session.ShardSession.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.Session.ShardSession.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTarget();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.Target.serializeBinaryToWriter
    );
  }
  f = this.getTransactionId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional query.Target target = 1;
 * @return {?proto.query.Target}
 */
proto.vtgate.Session.ShardSession.prototype.getTarget = function() {
  return /** @type{?proto.query.Target} */ (
    jspb.Message.getWrapperField(this, query_pb.Target, 1));
};


/** @param {?proto.query.Target|undefined} value */
proto.vtgate.Session.ShardSession.prototype.setTarget = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.Session.ShardSession.prototype.clearTarget = function() {
  this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.Session.ShardSession.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 transaction_id = 2;
 * @return {number}
 */
proto.vtgate.Session.ShardSession.prototype.getTransactionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.vtgate.Session.ShardSession.prototype.setTransactionId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteRequest.displayName = 'proto.vtgate.ExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    tabletType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    notInTransaction: jspb.Message.getFieldWithDefault(msg, 5, false),
    keyspace: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteRequest}
 */
proto.vtgate.ExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteRequest;
  return proto.vtgate.ExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteRequest}
 */
proto.vtgate.ExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotInTransaction(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getNotInTransaction();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.BoundQuery query = 3;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.ExecuteRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 3));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.ExecuteRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional topodata.TabletType tablet_type = 4;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool not_in_transaction = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteRequest.prototype.getNotInTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteRequest.prototype.setNotInTransaction = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string keyspace = 6;
 * @return {string}
 */
proto.vtgate.ExecuteRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.vtgate.ExecuteRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteResponse.displayName = 'proto.vtgate.ExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteResponse}
 */
proto.vtgate.ExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteResponse;
  return proto.vtgate.ExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteResponse}
 */
proto.vtgate.ExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.QueryResult result = 3;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.ExecuteResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.ExecuteResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteShardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteShardsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteShardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteShardsRequest.displayName = 'proto.vtgate.ExecuteShardsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteShardsRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteShardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteShardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteShardsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteShardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    shardsList: jspb.Message.getField(msg, 5),
    tabletType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    notInTransaction: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteShardsRequest}
 */
proto.vtgate.ExecuteShardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteShardsRequest;
  return proto.vtgate.ExecuteShardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteShardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteShardsRequest}
 */
proto.vtgate.ExecuteShardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addShards(value);
      break;
    case 6:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotInTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteShardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteShardsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteShardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteShardsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getNotInTransaction();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteShardsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteShardsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteShardsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteShardsRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteShardsRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteShardsRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.BoundQuery query = 3;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 3));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.ExecuteShardsRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteShardsRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteShardsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string keyspace = 4;
 * @return {string}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vtgate.ExecuteShardsRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string shards = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getShardsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {!Array.<string>} value */
proto.vtgate.ExecuteShardsRequest.prototype.setShardsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.vtgate.ExecuteShardsRequest.prototype.addShards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.vtgate.ExecuteShardsRequest.prototype.clearShardsList = function() {
  this.setShardsList([]);
};


/**
 * optional topodata.TabletType tablet_type = 6;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteShardsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool not_in_transaction = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteShardsRequest.prototype.getNotInTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteShardsRequest.prototype.setNotInTransaction = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteShardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteShardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteShardsResponse.displayName = 'proto.vtgate.ExecuteShardsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteShardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteShardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteShardsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteShardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteShardsResponse}
 */
proto.vtgate.ExecuteShardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteShardsResponse;
  return proto.vtgate.ExecuteShardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteShardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteShardsResponse}
 */
proto.vtgate.ExecuteShardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteShardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteShardsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteShardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteShardsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteShardsResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteShardsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteShardsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteShardsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteShardsResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteShardsResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteShardsResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteShardsResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.QueryResult result = 3;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.ExecuteShardsResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.ExecuteShardsResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteShardsResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteShardsResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteKeyspaceIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteKeyspaceIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteKeyspaceIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteKeyspaceIdsRequest.displayName = 'proto.vtgate.ExecuteKeyspaceIdsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteKeyspaceIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteKeyspaceIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    keyspaceIdsList: msg.getKeyspaceIdsList_asB64(),
    tabletType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    notInTransaction: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteKeyspaceIdsRequest}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteKeyspaceIdsRequest;
  return proto.vtgate.ExecuteKeyspaceIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteKeyspaceIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteKeyspaceIdsRequest}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeyspaceIds(value);
      break;
    case 6:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotInTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteKeyspaceIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getKeyspaceIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getNotInTransaction();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.BoundQuery query = 3;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 3));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string keyspace = 4;
 * @return {string}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated bytes keyspace_ids = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getKeyspaceIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 5));
};


/**
 * repeated bytes keyspace_ids = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getKeyspaceIdsList()`
 * @return {!Array.<string>}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getKeyspaceIdsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeyspaceIdsList()));
};


/**
 * repeated bytes keyspace_ids = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyspaceIdsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getKeyspaceIdsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeyspaceIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setKeyspaceIdsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.addKeyspaceIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.clearKeyspaceIdsList = function() {
  this.setKeyspaceIdsList([]);
};


/**
 * optional topodata.TabletType tablet_type = 6;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool not_in_transaction = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.getNotInTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteKeyspaceIdsRequest.prototype.setNotInTransaction = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteKeyspaceIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteKeyspaceIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteKeyspaceIdsResponse.displayName = 'proto.vtgate.ExecuteKeyspaceIdsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteKeyspaceIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteKeyspaceIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteKeyspaceIdsResponse}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteKeyspaceIdsResponse;
  return proto.vtgate.ExecuteKeyspaceIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteKeyspaceIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteKeyspaceIdsResponse}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteKeyspaceIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.QueryResult result = 3;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyspaceIdsResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteKeyRangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteKeyRangesRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteKeyRangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteKeyRangesRequest.displayName = 'proto.vtgate.ExecuteKeyRangesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteKeyRangesRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteKeyRangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteKeyRangesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyRangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    keyRangesList: jspb.Message.toObjectList(msg.getKeyRangesList(),
    topodata_pb.KeyRange.toObject, includeInstance),
    tabletType: jspb.Message.getFieldWithDefault(msg, 6, 0),
    notInTransaction: jspb.Message.getFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteKeyRangesRequest}
 */
proto.vtgate.ExecuteKeyRangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteKeyRangesRequest;
  return proto.vtgate.ExecuteKeyRangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteKeyRangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteKeyRangesRequest}
 */
proto.vtgate.ExecuteKeyRangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 5:
      var value = new topodata_pb.KeyRange;
      reader.readMessage(value,topodata_pb.KeyRange.deserializeBinaryFromReader);
      msg.addKeyRanges(value);
      break;
    case 6:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotInTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteKeyRangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyRangesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getKeyRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      topodata_pb.KeyRange.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = this.getNotInTransaction();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteKeyRangesRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteKeyRangesRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.BoundQuery query = 3;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 3));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteKeyRangesRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string keyspace = 4;
 * @return {string}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated topodata.KeyRange key_ranges = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.KeyRange>}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getKeyRangesList = function() {
  return /** @type{!Array.<!proto.topodata.KeyRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, topodata_pb.KeyRange, 5));
};


/** @param {!Array.<!proto.topodata.KeyRange>} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setKeyRangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.topodata.KeyRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.KeyRange}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.addKeyRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.topodata.KeyRange, opt_index);
};


proto.vtgate.ExecuteKeyRangesRequest.prototype.clearKeyRangesList = function() {
  this.setKeyRangesList([]);
};


/**
 * optional topodata.TabletType tablet_type = 6;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool not_in_transaction = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteKeyRangesRequest.prototype.getNotInTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteKeyRangesRequest.prototype.setNotInTransaction = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteKeyRangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteKeyRangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteKeyRangesResponse.displayName = 'proto.vtgate.ExecuteKeyRangesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteKeyRangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteKeyRangesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteKeyRangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteKeyRangesResponse}
 */
proto.vtgate.ExecuteKeyRangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteKeyRangesResponse;
  return proto.vtgate.ExecuteKeyRangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteKeyRangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteKeyRangesResponse}
 */
proto.vtgate.ExecuteKeyRangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteKeyRangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyRangesResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteKeyRangesResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteKeyRangesResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteKeyRangesResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteKeyRangesResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.QueryResult result = 3;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.ExecuteKeyRangesResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteKeyRangesResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteKeyRangesResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteEntityIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteEntityIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteEntityIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteEntityIdsRequest.displayName = 'proto.vtgate.ExecuteEntityIdsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteEntityIdsRequest.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteEntityIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteEntityIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteEntityIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    entityColumnName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    entityKeyspaceIdsList: jspb.Message.toObjectList(msg.getEntityKeyspaceIdsList(),
    proto.vtgate.ExecuteEntityIdsRequest.EntityId.toObject, includeInstance),
    tabletType: jspb.Message.getFieldWithDefault(msg, 7, 0),
    notInTransaction: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteEntityIdsRequest}
 */
proto.vtgate.ExecuteEntityIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteEntityIdsRequest;
  return proto.vtgate.ExecuteEntityIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteEntityIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteEntityIdsRequest}
 */
proto.vtgate.ExecuteEntityIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntityColumnName(value);
      break;
    case 6:
      var value = new proto.vtgate.ExecuteEntityIdsRequest.EntityId;
      reader.readMessage(value,proto.vtgate.ExecuteEntityIdsRequest.EntityId.deserializeBinaryFromReader);
      msg.addEntityKeyspaceIds(value);
      break;
    case 7:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNotInTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteEntityIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteEntityIdsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getEntityColumnName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getEntityKeyspaceIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.vtgate.ExecuteEntityIdsRequest.EntityId.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = this.getNotInTransaction();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteEntityIdsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteEntityIdsRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.BoundQuery query = 3;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 3));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteEntityIdsRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string keyspace = 4;
 * @return {string}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string entity_column_name = 5;
 * @return {string}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getEntityColumnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setEntityColumnName = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * repeated EntityId entity_keyspace_ids = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vtgate.ExecuteEntityIdsRequest.EntityId>}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getEntityKeyspaceIdsList = function() {
  return /** @type{!Array.<!proto.vtgate.ExecuteEntityIdsRequest.EntityId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vtgate.ExecuteEntityIdsRequest.EntityId, 6));
};


/** @param {!Array.<!proto.vtgate.ExecuteEntityIdsRequest.EntityId>} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setEntityKeyspaceIdsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.vtgate.ExecuteEntityIdsRequest.EntityId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vtgate.ExecuteEntityIdsRequest.EntityId}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.addEntityKeyspaceIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.vtgate.ExecuteEntityIdsRequest.EntityId, opt_index);
};


proto.vtgate.ExecuteEntityIdsRequest.prototype.clearEntityKeyspaceIdsList = function() {
  this.setEntityKeyspaceIdsList([]);
};


/**
 * optional topodata.TabletType tablet_type = 7;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool not_in_transaction = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteEntityIdsRequest.prototype.getNotInTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteEntityIdsRequest.prototype.setNotInTransaction = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteEntityIdsRequest.EntityId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteEntityIdsRequest.EntityId.displayName = 'proto.vtgate.ExecuteEntityIdsRequest.EntityId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteEntityIdsRequest.EntityId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteEntityIdsRequest.EntityId} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64(),
    keyspaceId: msg.getKeyspaceId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteEntityIdsRequest.EntityId}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteEntityIdsRequest.EntityId;
  return proto.vtgate.ExecuteEntityIdsRequest.EntityId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteEntityIdsRequest.EntityId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteEntityIdsRequest.EntityId}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.query.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyspaceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteEntityIdsRequest.EntityId} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getKeyspaceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional query.Type type = 1;
 * @return {!proto.query.Type}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getType = function() {
  return /** @type {!proto.query.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.query.Type} value */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes keyspace_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getKeyspaceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes keyspace_id = 3;
 * This is a type-conversion wrapper around `getKeyspaceId()`
 * @return {string}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getKeyspaceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyspaceId()));
};


/**
 * optional bytes keyspace_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyspaceId()`
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.getKeyspaceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyspaceId()));
};


/** @param {!(string|Uint8Array)} value */
proto.vtgate.ExecuteEntityIdsRequest.EntityId.prototype.setKeyspaceId = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteEntityIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.ExecuteEntityIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteEntityIdsResponse.displayName = 'proto.vtgate.ExecuteEntityIdsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteEntityIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteEntityIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteEntityIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteEntityIdsResponse}
 */
proto.vtgate.ExecuteEntityIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteEntityIdsResponse;
  return proto.vtgate.ExecuteEntityIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteEntityIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteEntityIdsResponse}
 */
proto.vtgate.ExecuteEntityIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteEntityIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteEntityIdsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteEntityIdsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteEntityIdsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteEntityIdsResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteEntityIdsResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional query.QueryResult result = 3;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.ExecuteEntityIdsResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.ExecuteEntityIdsResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteEntityIdsResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.BoundShardQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.BoundShardQuery.repeatedFields_, null);
};
goog.inherits(proto.vtgate.BoundShardQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.BoundShardQuery.displayName = 'proto.vtgate.BoundShardQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.BoundShardQuery.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.BoundShardQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.BoundShardQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.BoundShardQuery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.BoundShardQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    shardsList: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.BoundShardQuery}
 */
proto.vtgate.BoundShardQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.BoundShardQuery;
  return proto.vtgate.BoundShardQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.BoundShardQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.BoundShardQuery}
 */
proto.vtgate.BoundShardQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addShards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.BoundShardQuery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BoundShardQuery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.BoundShardQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BoundShardQuery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional query.BoundQuery query = 1;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.BoundShardQuery.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 1));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.BoundShardQuery.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.BoundShardQuery.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.BoundShardQuery.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string keyspace = 2;
 * @return {string}
 */
proto.vtgate.BoundShardQuery.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vtgate.BoundShardQuery.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated string shards = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.vtgate.BoundShardQuery.prototype.getShardsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 3));
};


/** @param {!Array.<string>} value */
proto.vtgate.BoundShardQuery.prototype.setShardsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.vtgate.BoundShardQuery.prototype.addShards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.vtgate.BoundShardQuery.prototype.clearShardsList = function() {
  this.setShardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteBatchShardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteBatchShardsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteBatchShardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteBatchShardsRequest.displayName = 'proto.vtgate.ExecuteBatchShardsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteBatchShardsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteBatchShardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteBatchShardsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchShardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.vtgate.BoundShardQuery.toObject, includeInstance),
    tabletType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    asTransaction: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteBatchShardsRequest}
 */
proto.vtgate.ExecuteBatchShardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteBatchShardsRequest;
  return proto.vtgate.ExecuteBatchShardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteBatchShardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteBatchShardsRequest}
 */
proto.vtgate.ExecuteBatchShardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new proto.vtgate.BoundShardQuery;
      reader.readMessage(value,proto.vtgate.BoundShardQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    case 4:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteBatchShardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchShardsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vtgate.BoundShardQuery.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getAsTransaction();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteBatchShardsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteBatchShardsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteBatchShardsRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteBatchShardsRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BoundShardQuery queries = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vtgate.BoundShardQuery>}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.getQueriesList = function() {
  return /** @type{!Array.<!proto.vtgate.BoundShardQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vtgate.BoundShardQuery, 3));
};


/** @param {!Array.<!proto.vtgate.BoundShardQuery>} value */
proto.vtgate.ExecuteBatchShardsRequest.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vtgate.BoundShardQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vtgate.BoundShardQuery}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vtgate.BoundShardQuery, opt_index);
};


proto.vtgate.ExecuteBatchShardsRequest.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};


/**
 * optional topodata.TabletType tablet_type = 4;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteBatchShardsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool as_transaction = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteBatchShardsRequest.prototype.getAsTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteBatchShardsRequest.prototype.setAsTransaction = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteBatchShardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteBatchShardsResponse.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteBatchShardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteBatchShardsResponse.displayName = 'proto.vtgate.ExecuteBatchShardsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteBatchShardsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteBatchShardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteBatchShardsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchShardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    query_pb.QueryResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteBatchShardsResponse}
 */
proto.vtgate.ExecuteBatchShardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteBatchShardsResponse;
  return proto.vtgate.ExecuteBatchShardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteBatchShardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteBatchShardsResponse}
 */
proto.vtgate.ExecuteBatchShardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteBatchShardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchShardsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteBatchShardsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteBatchShardsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteBatchShardsResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteBatchShardsResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated query.QueryResult results = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.QueryResult>}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.query.QueryResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {!Array.<!proto.query.QueryResult>} value */
proto.vtgate.ExecuteBatchShardsResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.query.QueryResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.QueryResult}
 */
proto.vtgate.ExecuteBatchShardsResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.query.QueryResult, opt_index);
};


proto.vtgate.ExecuteBatchShardsResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.BoundKeyspaceIdQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.BoundKeyspaceIdQuery.repeatedFields_, null);
};
goog.inherits(proto.vtgate.BoundKeyspaceIdQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.BoundKeyspaceIdQuery.displayName = 'proto.vtgate.BoundKeyspaceIdQuery';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.BoundKeyspaceIdQuery.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.BoundKeyspaceIdQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.BoundKeyspaceIdQuery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.BoundKeyspaceIdQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keyspaceIdsList: msg.getKeyspaceIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.BoundKeyspaceIdQuery}
 */
proto.vtgate.BoundKeyspaceIdQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.BoundKeyspaceIdQuery;
  return proto.vtgate.BoundKeyspaceIdQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.BoundKeyspaceIdQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.BoundKeyspaceIdQuery}
 */
proto.vtgate.BoundKeyspaceIdQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeyspaceIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.BoundKeyspaceIdQuery} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BoundKeyspaceIdQuery.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getKeyspaceIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional query.BoundQuery query = 1;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 1));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.BoundKeyspaceIdQuery.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.BoundKeyspaceIdQuery.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string keyspace = 2;
 * @return {string}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vtgate.BoundKeyspaceIdQuery.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated bytes keyspace_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.getKeyspaceIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 3));
};


/**
 * repeated bytes keyspace_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getKeyspaceIdsList()`
 * @return {!Array.<string>}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.getKeyspaceIdsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeyspaceIdsList()));
};


/**
 * repeated bytes keyspace_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyspaceIdsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.getKeyspaceIdsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeyspaceIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.vtgate.BoundKeyspaceIdQuery.prototype.setKeyspaceIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.vtgate.BoundKeyspaceIdQuery.prototype.addKeyspaceIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.vtgate.BoundKeyspaceIdQuery.prototype.clearKeyspaceIdsList = function() {
  this.setKeyspaceIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteBatchKeyspaceIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteBatchKeyspaceIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteBatchKeyspaceIdsRequest.displayName = 'proto.vtgate.ExecuteBatchKeyspaceIdsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteBatchKeyspaceIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteBatchKeyspaceIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.vtgate.BoundKeyspaceIdQuery.toObject, includeInstance),
    tabletType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    asTransaction: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteBatchKeyspaceIdsRequest}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteBatchKeyspaceIdsRequest;
  return proto.vtgate.ExecuteBatchKeyspaceIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteBatchKeyspaceIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteBatchKeyspaceIdsRequest}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new proto.vtgate.BoundKeyspaceIdQuery;
      reader.readMessage(value,proto.vtgate.BoundKeyspaceIdQuery.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    case 4:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAsTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteBatchKeyspaceIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vtgate.BoundKeyspaceIdQuery.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getAsTransaction();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BoundKeyspaceIdQuery queries = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vtgate.BoundKeyspaceIdQuery>}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.getQueriesList = function() {
  return /** @type{!Array.<!proto.vtgate.BoundKeyspaceIdQuery>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vtgate.BoundKeyspaceIdQuery, 3));
};


/** @param {!Array.<!proto.vtgate.BoundKeyspaceIdQuery>} value */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.setQueriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vtgate.BoundKeyspaceIdQuery=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vtgate.BoundKeyspaceIdQuery}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vtgate.BoundKeyspaceIdQuery, opt_index);
};


proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.clearQueriesList = function() {
  this.setQueriesList([]);
};


/**
 * optional topodata.TabletType tablet_type = 4;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool as_transaction = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.getAsTransaction = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.vtgate.ExecuteBatchKeyspaceIdsRequest.prototype.setAsTransaction = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.ExecuteBatchKeyspaceIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.vtgate.ExecuteBatchKeyspaceIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.ExecuteBatchKeyspaceIdsResponse.displayName = 'proto.vtgate.ExecuteBatchKeyspaceIdsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.ExecuteBatchKeyspaceIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.ExecuteBatchKeyspaceIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && vtrpc_pb.RPCError.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    query_pb.QueryResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.ExecuteBatchKeyspaceIdsResponse}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.ExecuteBatchKeyspaceIdsResponse;
  return proto.vtgate.ExecuteBatchKeyspaceIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.ExecuteBatchKeyspaceIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.ExecuteBatchKeyspaceIdsResponse}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.RPCError;
      reader.readMessage(value,vtrpc_pb.RPCError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    case 3:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.ExecuteBatchKeyspaceIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.RPCError.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
  f = this.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.RPCError error = 1;
 * @return {?proto.vtrpc.RPCError}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.getError = function() {
  return /** @type{?proto.vtrpc.RPCError} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.RPCError, 1));
};


/** @param {?proto.vtrpc.RPCError|undefined} value */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.setError = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated query.QueryResult results = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.query.QueryResult>}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.query.QueryResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, query_pb.QueryResult, 3));
};


/** @param {!Array.<!proto.query.QueryResult>} value */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.query.QueryResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.query.QueryResult}
 */
proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.query.QueryResult, opt_index);
};


proto.vtgate.ExecuteBatchKeyspaceIdsResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.StreamExecuteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteRequest.displayName = 'proto.vtgate.StreamExecuteRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    tabletType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    keyspace: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteRequest}
 */
proto.vtgate.StreamExecuteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteRequest;
  return proto.vtgate.StreamExecuteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteRequest}
 */
proto.vtgate.StreamExecuteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.StreamExecuteRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.StreamExecuteRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional query.BoundQuery query = 2;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.StreamExecuteRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 2));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.StreamExecuteRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.StreamExecuteRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional topodata.TabletType tablet_type = 3;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.StreamExecuteRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.StreamExecuteRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string keyspace = 4;
 * @return {string}
 */
proto.vtgate.StreamExecuteRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.vtgate.StreamExecuteRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.StreamExecuteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteResponse.displayName = 'proto.vtgate.StreamExecuteResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteResponse}
 */
proto.vtgate.StreamExecuteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteResponse;
  return proto.vtgate.StreamExecuteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteResponse}
 */
proto.vtgate.StreamExecuteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional query.QueryResult result = 1;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.StreamExecuteResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 1));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.StreamExecuteResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteShardsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.StreamExecuteShardsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.StreamExecuteShardsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteShardsRequest.displayName = 'proto.vtgate.StreamExecuteShardsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.StreamExecuteShardsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteShardsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteShardsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteShardsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shardsList: jspb.Message.getField(msg, 4),
    tabletType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteShardsRequest}
 */
proto.vtgate.StreamExecuteShardsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteShardsRequest;
  return proto.vtgate.StreamExecuteShardsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteShardsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteShardsRequest}
 */
proto.vtgate.StreamExecuteShardsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addShards(value);
      break;
    case 5:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteShardsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteShardsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.StreamExecuteShardsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteShardsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional query.BoundQuery query = 2;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 2));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.StreamExecuteShardsRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.StreamExecuteShardsRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string keyspace = 3;
 * @return {string}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vtgate.StreamExecuteShardsRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string shards = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.getShardsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.vtgate.StreamExecuteShardsRequest.prototype.setShardsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.addShards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.vtgate.StreamExecuteShardsRequest.prototype.clearShardsList = function() {
  this.setShardsList([]);
};


/**
 * optional topodata.TabletType tablet_type = 5;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.StreamExecuteShardsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.StreamExecuteShardsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteShardsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.StreamExecuteShardsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteShardsResponse.displayName = 'proto.vtgate.StreamExecuteShardsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteShardsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteShardsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteShardsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteShardsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteShardsResponse}
 */
proto.vtgate.StreamExecuteShardsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteShardsResponse;
  return proto.vtgate.StreamExecuteShardsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteShardsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteShardsResponse}
 */
proto.vtgate.StreamExecuteShardsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteShardsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteShardsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteShardsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteShardsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional query.QueryResult result = 1;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.StreamExecuteShardsResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 1));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.StreamExecuteShardsResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteShardsResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteShardsResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.StreamExecuteKeyspaceIdsRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.StreamExecuteKeyspaceIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteKeyspaceIdsRequest.displayName = 'proto.vtgate.StreamExecuteKeyspaceIdsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteKeyspaceIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteKeyspaceIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    keyspaceIdsList: msg.getKeyspaceIdsList_asB64(),
    tabletType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteKeyspaceIdsRequest}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteKeyspaceIdsRequest;
  return proto.vtgate.StreamExecuteKeyspaceIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteKeyspaceIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteKeyspaceIdsRequest}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKeyspaceIds(value);
      break;
    case 5:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteKeyspaceIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getKeyspaceIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional query.BoundQuery query = 2;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 2));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string keyspace = 3;
 * @return {string}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated bytes keyspace_ids = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getKeyspaceIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 4));
};


/**
 * repeated bytes keyspace_ids = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getKeyspaceIdsList()`
 * @return {!Array.<string>}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getKeyspaceIdsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getKeyspaceIdsList()));
};


/**
 * repeated bytes keyspace_ids = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyspaceIdsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getKeyspaceIdsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKeyspaceIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.setKeyspaceIdsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.addKeyspaceIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.clearKeyspaceIdsList = function() {
  this.setKeyspaceIdsList([]);
};


/**
 * optional topodata.TabletType tablet_type = 5;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.StreamExecuteKeyspaceIdsRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.StreamExecuteKeyspaceIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteKeyspaceIdsResponse.displayName = 'proto.vtgate.StreamExecuteKeyspaceIdsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteKeyspaceIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteKeyspaceIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteKeyspaceIdsResponse}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteKeyspaceIdsResponse;
  return proto.vtgate.StreamExecuteKeyspaceIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteKeyspaceIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteKeyspaceIdsResponse}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteKeyspaceIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional query.QueryResult result = 1;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 1));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteKeyspaceIdsResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteKeyRangesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.StreamExecuteKeyRangesRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.StreamExecuteKeyRangesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteKeyRangesRequest.displayName = 'proto.vtgate.StreamExecuteKeyRangesRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.StreamExecuteKeyRangesRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteKeyRangesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteKeyRangesRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 3, ""),
    keyRangesList: jspb.Message.toObjectList(msg.getKeyRangesList(),
    topodata_pb.KeyRange.toObject, includeInstance),
    tabletType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteKeyRangesRequest}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteKeyRangesRequest;
  return proto.vtgate.StreamExecuteKeyRangesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteKeyRangesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteKeyRangesRequest}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 4:
      var value = new topodata_pb.KeyRange;
      reader.readMessage(value,topodata_pb.KeyRange.deserializeBinaryFromReader);
      msg.addKeyRanges(value);
      break;
    case 5:
      var value = /** @type {!proto.topodata.TabletType} */ (reader.readEnum());
      msg.setTabletType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteKeyRangesRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyRangesRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getKeyRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      topodata_pb.KeyRange.serializeBinaryToWriter
    );
  }
  f = this.getTabletType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteKeyRangesRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional query.BoundQuery query = 2;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 2));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.StreamExecuteKeyRangesRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string keyspace = 3;
 * @return {string}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated topodata.KeyRange key_ranges = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.KeyRange>}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.getKeyRangesList = function() {
  return /** @type{!Array.<!proto.topodata.KeyRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, topodata_pb.KeyRange, 4));
};


/** @param {!Array.<!proto.topodata.KeyRange>} value */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.setKeyRangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.topodata.KeyRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.KeyRange}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.addKeyRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.topodata.KeyRange, opt_index);
};


proto.vtgate.StreamExecuteKeyRangesRequest.prototype.clearKeyRangesList = function() {
  this.setKeyRangesList([]);
};


/**
 * optional topodata.TabletType tablet_type = 5;
 * @return {!proto.topodata.TabletType}
 */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.getTabletType = function() {
  return /** @type {!proto.topodata.TabletType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.topodata.TabletType} value */
proto.vtgate.StreamExecuteKeyRangesRequest.prototype.setTabletType = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.StreamExecuteKeyRangesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.StreamExecuteKeyRangesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.StreamExecuteKeyRangesResponse.displayName = 'proto.vtgate.StreamExecuteKeyRangesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.StreamExecuteKeyRangesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.StreamExecuteKeyRangesResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && query_pb.QueryResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.StreamExecuteKeyRangesResponse}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.StreamExecuteKeyRangesResponse;
  return proto.vtgate.StreamExecuteKeyRangesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.StreamExecuteKeyRangesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.StreamExecuteKeyRangesResponse}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.QueryResult;
      reader.readMessage(value,query_pb.QueryResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.StreamExecuteKeyRangesResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyRangesResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.StreamExecuteKeyRangesResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional query.QueryResult result = 1;
 * @return {?proto.query.QueryResult}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.prototype.getResult = function() {
  return /** @type{?proto.query.QueryResult} */ (
    jspb.Message.getWrapperField(this, query_pb.QueryResult, 1));
};


/** @param {?proto.query.QueryResult|undefined} value */
proto.vtgate.StreamExecuteKeyRangesResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.StreamExecuteKeyRangesResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.StreamExecuteKeyRangesResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.BeginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.BeginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.BeginRequest.displayName = 'proto.vtgate.BeginRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.BeginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.BeginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.BeginRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.BeginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.BeginRequest}
 */
proto.vtgate.BeginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.BeginRequest;
  return proto.vtgate.BeginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.BeginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.BeginRequest}
 */
proto.vtgate.BeginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.BeginRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BeginRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.BeginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BeginRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.BeginRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.BeginRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.BeginRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.BeginRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.BeginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.BeginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.BeginResponse.displayName = 'proto.vtgate.BeginResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.BeginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.BeginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.BeginResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.BeginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.BeginResponse}
 */
proto.vtgate.BeginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.BeginResponse;
  return proto.vtgate.BeginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.BeginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.BeginResponse}
 */
proto.vtgate.BeginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.BeginResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BeginResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.BeginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.BeginResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.BeginResponse.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 1));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.BeginResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.BeginResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.BeginResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.CommitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.CommitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.CommitRequest.displayName = 'proto.vtgate.CommitRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.CommitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.CommitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.CommitRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.CommitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.CommitRequest}
 */
proto.vtgate.CommitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.CommitRequest;
  return proto.vtgate.CommitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.CommitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.CommitRequest}
 */
proto.vtgate.CommitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.CommitRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.CommitRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.CommitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.CommitRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.CommitRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.CommitRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.CommitRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.CommitRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.CommitRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.CommitRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.CommitRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.CommitRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.CommitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.CommitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.CommitResponse.displayName = 'proto.vtgate.CommitResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.CommitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.CommitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.CommitResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.CommitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.CommitResponse}
 */
proto.vtgate.CommitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.CommitResponse;
  return proto.vtgate.CommitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.CommitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.CommitResponse}
 */
proto.vtgate.CommitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.CommitResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.CommitResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.CommitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.CommitResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.RollbackRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.RollbackRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.RollbackRequest.displayName = 'proto.vtgate.RollbackRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.RollbackRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.RollbackRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.RollbackRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.RollbackRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    session: (f = msg.getSession()) && proto.vtgate.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.RollbackRequest}
 */
proto.vtgate.RollbackRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.RollbackRequest;
  return proto.vtgate.RollbackRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.RollbackRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.RollbackRequest}
 */
proto.vtgate.RollbackRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = new proto.vtgate.Session;
      reader.readMessage(value,proto.vtgate.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.RollbackRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.RollbackRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.RollbackRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.RollbackRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getSession();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.RollbackRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.RollbackRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.RollbackRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.RollbackRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Session session = 2;
 * @return {?proto.vtgate.Session}
 */
proto.vtgate.RollbackRequest.prototype.getSession = function() {
  return /** @type{?proto.vtgate.Session} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.Session, 2));
};


/** @param {?proto.vtgate.Session|undefined} value */
proto.vtgate.RollbackRequest.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.RollbackRequest.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.RollbackRequest.prototype.hasSession = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.RollbackResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.RollbackResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.RollbackResponse.displayName = 'proto.vtgate.RollbackResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.RollbackResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.RollbackResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.RollbackResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.RollbackResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.RollbackResponse}
 */
proto.vtgate.RollbackResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.RollbackResponse;
  return proto.vtgate.RollbackResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.RollbackResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.RollbackResponse}
 */
proto.vtgate.RollbackResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.RollbackResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.RollbackResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.RollbackResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.RollbackResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.SplitQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.SplitQueryRequest.repeatedFields_, null);
};
goog.inherits(proto.vtgate.SplitQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.SplitQueryRequest.displayName = 'proto.vtgate.SplitQueryRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.SplitQueryRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.SplitQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.SplitQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.SplitQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.SplitQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    callerId: (f = msg.getCallerId()) && vtrpc_pb.CallerID.toObject(includeInstance, f),
    keyspace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    splitColumnList: jspb.Message.getField(msg, 4),
    splitCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    numRowsPerQueryPart: jspb.Message.getFieldWithDefault(msg, 6, 0),
    algorithm: jspb.Message.getFieldWithDefault(msg, 7, 0),
    useSplitQueryV2: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.SplitQueryRequest}
 */
proto.vtgate.SplitQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.SplitQueryRequest;
  return proto.vtgate.SplitQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.SplitQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.SplitQueryRequest}
 */
proto.vtgate.SplitQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vtrpc_pb.CallerID;
      reader.readMessage(value,vtrpc_pb.CallerID.deserializeBinaryFromReader);
      msg.setCallerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 3:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addSplitColumn(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSplitCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumRowsPerQueryPart(value);
      break;
    case 7:
      var value = /** @type {!proto.query.SplitQueryRequest.Algorithm} */ (reader.readEnum());
      msg.setAlgorithm(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseSplitQueryV2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.SplitQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.SplitQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getCallerId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vtrpc_pb.CallerID.serializeBinaryToWriter
    );
  }
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getSplitColumnList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = this.getSplitCount();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getNumRowsPerQueryPart();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = this.getAlgorithm();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = this.getUseSplitQueryV2();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional vtrpc.CallerID caller_id = 1;
 * @return {?proto.vtrpc.CallerID}
 */
proto.vtgate.SplitQueryRequest.prototype.getCallerId = function() {
  return /** @type{?proto.vtrpc.CallerID} */ (
    jspb.Message.getWrapperField(this, vtrpc_pb.CallerID, 1));
};


/** @param {?proto.vtrpc.CallerID|undefined} value */
proto.vtgate.SplitQueryRequest.prototype.setCallerId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.SplitQueryRequest.prototype.clearCallerId = function() {
  this.setCallerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.SplitQueryRequest.prototype.hasCallerId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string keyspace = 2;
 * @return {string}
 */
proto.vtgate.SplitQueryRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vtgate.SplitQueryRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional query.BoundQuery query = 3;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.SplitQueryRequest.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 3));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.SplitQueryRequest.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.SplitQueryRequest.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.SplitQueryRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string split_column = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.vtgate.SplitQueryRequest.prototype.getSplitColumnList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.vtgate.SplitQueryRequest.prototype.setSplitColumnList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.vtgate.SplitQueryRequest.prototype.addSplitColumn = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.vtgate.SplitQueryRequest.prototype.clearSplitColumnList = function() {
  this.setSplitColumnList([]);
};


/**
 * optional int64 split_count = 5;
 * @return {number}
 */
proto.vtgate.SplitQueryRequest.prototype.getSplitCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.vtgate.SplitQueryRequest.prototype.setSplitCount = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional int64 num_rows_per_query_part = 6;
 * @return {number}
 */
proto.vtgate.SplitQueryRequest.prototype.getNumRowsPerQueryPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.vtgate.SplitQueryRequest.prototype.setNumRowsPerQueryPart = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional query.SplitQueryRequest.Algorithm algorithm = 7;
 * @return {!proto.query.SplitQueryRequest.Algorithm}
 */
proto.vtgate.SplitQueryRequest.prototype.getAlgorithm = function() {
  return /** @type {!proto.query.SplitQueryRequest.Algorithm} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.query.SplitQueryRequest.Algorithm} value */
proto.vtgate.SplitQueryRequest.prototype.setAlgorithm = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool use_split_query_v2 = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vtgate.SplitQueryRequest.prototype.getUseSplitQueryV2 = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.vtgate.SplitQueryRequest.prototype.setUseSplitQueryV2 = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.SplitQueryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.SplitQueryResponse.repeatedFields_, null);
};
goog.inherits(proto.vtgate.SplitQueryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.SplitQueryResponse.displayName = 'proto.vtgate.SplitQueryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.SplitQueryResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.SplitQueryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.SplitQueryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.vtgate.SplitQueryResponse.Part.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.SplitQueryResponse}
 */
proto.vtgate.SplitQueryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.SplitQueryResponse;
  return proto.vtgate.SplitQueryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.SplitQueryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.SplitQueryResponse}
 */
proto.vtgate.SplitQueryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vtgate.SplitQueryResponse.Part;
      reader.readMessage(value,proto.vtgate.SplitQueryResponse.Part.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.SplitQueryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.SplitQueryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vtgate.SplitQueryResponse.Part.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Part splits = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vtgate.SplitQueryResponse.Part>}
 */
proto.vtgate.SplitQueryResponse.prototype.getSplitsList = function() {
  return /** @type{!Array.<!proto.vtgate.SplitQueryResponse.Part>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vtgate.SplitQueryResponse.Part, 1));
};


/** @param {!Array.<!proto.vtgate.SplitQueryResponse.Part>} value */
proto.vtgate.SplitQueryResponse.prototype.setSplitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vtgate.SplitQueryResponse.Part=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vtgate.SplitQueryResponse.Part}
 */
proto.vtgate.SplitQueryResponse.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vtgate.SplitQueryResponse.Part, opt_index);
};


proto.vtgate.SplitQueryResponse.prototype.clearSplitsList = function() {
  this.setSplitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.SplitQueryResponse.KeyRangePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.SplitQueryResponse.KeyRangePart.repeatedFields_, null);
};
goog.inherits(proto.vtgate.SplitQueryResponse.KeyRangePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.SplitQueryResponse.KeyRangePart.displayName = 'proto.vtgate.SplitQueryResponse.KeyRangePart';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.SplitQueryResponse.KeyRangePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.SplitQueryResponse.KeyRangePart} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyRangesList: jspb.Message.toObjectList(msg.getKeyRangesList(),
    topodata_pb.KeyRange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.SplitQueryResponse.KeyRangePart}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.SplitQueryResponse.KeyRangePart;
  return proto.vtgate.SplitQueryResponse.KeyRangePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.SplitQueryResponse.KeyRangePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.SplitQueryResponse.KeyRangePart}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 2:
      var value = new topodata_pb.KeyRange;
      reader.readMessage(value,topodata_pb.KeyRange.deserializeBinaryFromReader);
      msg.addKeyRanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.SplitQueryResponse.KeyRangePart} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getKeyRangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      topodata_pb.KeyRange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string keyspace = 1;
 * @return {string}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated topodata.KeyRange key_ranges = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.topodata.KeyRange>}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.getKeyRangesList = function() {
  return /** @type{!Array.<!proto.topodata.KeyRange>} */ (
    jspb.Message.getRepeatedWrapperField(this, topodata_pb.KeyRange, 2));
};


/** @param {!Array.<!proto.topodata.KeyRange>} value */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.setKeyRangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.topodata.KeyRange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.topodata.KeyRange}
 */
proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.addKeyRanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.topodata.KeyRange, opt_index);
};


proto.vtgate.SplitQueryResponse.KeyRangePart.prototype.clearKeyRangesList = function() {
  this.setKeyRangesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.SplitQueryResponse.ShardPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vtgate.SplitQueryResponse.ShardPart.repeatedFields_, null);
};
goog.inherits(proto.vtgate.SplitQueryResponse.ShardPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.SplitQueryResponse.ShardPart.displayName = 'proto.vtgate.SplitQueryResponse.ShardPart';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vtgate.SplitQueryResponse.ShardPart.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.SplitQueryResponse.ShardPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.SplitQueryResponse.ShardPart} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.ShardPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shardsList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.SplitQueryResponse.ShardPart}
 */
proto.vtgate.SplitQueryResponse.ShardPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.SplitQueryResponse.ShardPart;
  return proto.vtgate.SplitQueryResponse.ShardPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.SplitQueryResponse.ShardPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.SplitQueryResponse.ShardPart}
 */
proto.vtgate.SplitQueryResponse.ShardPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addShards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.SplitQueryResponse.ShardPart} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.ShardPart.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getShardsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string keyspace = 1;
 * @return {string}
 */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string shards = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.getShardsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.setShardsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.vtgate.SplitQueryResponse.ShardPart.prototype.addShards = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.vtgate.SplitQueryResponse.ShardPart.prototype.clearShardsList = function() {
  this.setShardsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.SplitQueryResponse.Part = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.SplitQueryResponse.Part, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.SplitQueryResponse.Part.displayName = 'proto.vtgate.SplitQueryResponse.Part';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.SplitQueryResponse.Part.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.SplitQueryResponse.Part} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.SplitQueryResponse.Part.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: (f = msg.getQuery()) && query_pb.BoundQuery.toObject(includeInstance, f),
    keyRangePart: (f = msg.getKeyRangePart()) && proto.vtgate.SplitQueryResponse.KeyRangePart.toObject(includeInstance, f),
    shardPart: (f = msg.getShardPart()) && proto.vtgate.SplitQueryResponse.ShardPart.toObject(includeInstance, f),
    size: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.SplitQueryResponse.Part}
 */
proto.vtgate.SplitQueryResponse.Part.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.SplitQueryResponse.Part;
  return proto.vtgate.SplitQueryResponse.Part.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.SplitQueryResponse.Part} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.SplitQueryResponse.Part}
 */
proto.vtgate.SplitQueryResponse.Part.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new query_pb.BoundQuery;
      reader.readMessage(value,query_pb.BoundQuery.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    case 2:
      var value = new proto.vtgate.SplitQueryResponse.KeyRangePart;
      reader.readMessage(value,proto.vtgate.SplitQueryResponse.KeyRangePart.deserializeBinaryFromReader);
      msg.setKeyRangePart(value);
      break;
    case 3:
      var value = new proto.vtgate.SplitQueryResponse.ShardPart;
      reader.readMessage(value,proto.vtgate.SplitQueryResponse.ShardPart.deserializeBinaryFromReader);
      msg.setShardPart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.SplitQueryResponse.Part} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.Part.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.SplitQueryResponse.Part.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      query_pb.BoundQuery.serializeBinaryToWriter
    );
  }
  f = this.getKeyRangePart();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vtgate.SplitQueryResponse.KeyRangePart.serializeBinaryToWriter
    );
  }
  f = this.getShardPart();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vtgate.SplitQueryResponse.ShardPart.serializeBinaryToWriter
    );
  }
  f = this.getSize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional query.BoundQuery query = 1;
 * @return {?proto.query.BoundQuery}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.getQuery = function() {
  return /** @type{?proto.query.BoundQuery} */ (
    jspb.Message.getWrapperField(this, query_pb.BoundQuery, 1));
};


/** @param {?proto.query.BoundQuery|undefined} value */
proto.vtgate.SplitQueryResponse.Part.prototype.setQuery = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.SplitQueryResponse.Part.prototype.clearQuery = function() {
  this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KeyRangePart key_range_part = 2;
 * @return {?proto.vtgate.SplitQueryResponse.KeyRangePart}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.getKeyRangePart = function() {
  return /** @type{?proto.vtgate.SplitQueryResponse.KeyRangePart} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.SplitQueryResponse.KeyRangePart, 2));
};


/** @param {?proto.vtgate.SplitQueryResponse.KeyRangePart|undefined} value */
proto.vtgate.SplitQueryResponse.Part.prototype.setKeyRangePart = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.vtgate.SplitQueryResponse.Part.prototype.clearKeyRangePart = function() {
  this.setKeyRangePart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.hasKeyRangePart = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ShardPart shard_part = 3;
 * @return {?proto.vtgate.SplitQueryResponse.ShardPart}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.getShardPart = function() {
  return /** @type{?proto.vtgate.SplitQueryResponse.ShardPart} */ (
    jspb.Message.getWrapperField(this, proto.vtgate.SplitQueryResponse.ShardPart, 3));
};


/** @param {?proto.vtgate.SplitQueryResponse.ShardPart|undefined} value */
proto.vtgate.SplitQueryResponse.Part.prototype.setShardPart = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vtgate.SplitQueryResponse.Part.prototype.clearShardPart = function() {
  this.setShardPart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.hasShardPart = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 size = 4;
 * @return {number}
 */
proto.vtgate.SplitQueryResponse.Part.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.vtgate.SplitQueryResponse.Part.prototype.setSize = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.GetSrvKeyspaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.GetSrvKeyspaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.GetSrvKeyspaceRequest.displayName = 'proto.vtgate.GetSrvKeyspaceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.GetSrvKeyspaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.GetSrvKeyspaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.GetSrvKeyspaceRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.GetSrvKeyspaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspace: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.GetSrvKeyspaceRequest}
 */
proto.vtgate.GetSrvKeyspaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.GetSrvKeyspaceRequest;
  return proto.vtgate.GetSrvKeyspaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.GetSrvKeyspaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.GetSrvKeyspaceRequest}
 */
proto.vtgate.GetSrvKeyspaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.GetSrvKeyspaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.GetSrvKeyspaceRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.GetSrvKeyspaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.GetSrvKeyspaceRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string keyspace = 1;
 * @return {string}
 */
proto.vtgate.GetSrvKeyspaceRequest.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vtgate.GetSrvKeyspaceRequest.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vtgate.GetSrvKeyspaceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vtgate.GetSrvKeyspaceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vtgate.GetSrvKeyspaceResponse.displayName = 'proto.vtgate.GetSrvKeyspaceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vtgate.GetSrvKeyspaceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.vtgate.GetSrvKeyspaceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vtgate.GetSrvKeyspaceResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vtgate.GetSrvKeyspaceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    srvKeyspace: (f = msg.getSrvKeyspace()) && topodata_pb.SrvKeyspace.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vtgate.GetSrvKeyspaceResponse}
 */
proto.vtgate.GetSrvKeyspaceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vtgate.GetSrvKeyspaceResponse;
  return proto.vtgate.GetSrvKeyspaceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vtgate.GetSrvKeyspaceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vtgate.GetSrvKeyspaceResponse}
 */
proto.vtgate.GetSrvKeyspaceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new topodata_pb.SrvKeyspace;
      reader.readMessage(value,topodata_pb.SrvKeyspace.deserializeBinaryFromReader);
      msg.setSrvKeyspace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vtgate.GetSrvKeyspaceResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.GetSrvKeyspaceResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vtgate.GetSrvKeyspaceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vtgate.GetSrvKeyspaceResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSrvKeyspace();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      topodata_pb.SrvKeyspace.serializeBinaryToWriter
    );
  }
};


/**
 * optional topodata.SrvKeyspace srv_keyspace = 1;
 * @return {?proto.topodata.SrvKeyspace}
 */
proto.vtgate.GetSrvKeyspaceResponse.prototype.getSrvKeyspace = function() {
  return /** @type{?proto.topodata.SrvKeyspace} */ (
    jspb.Message.getWrapperField(this, topodata_pb.SrvKeyspace, 1));
};


/** @param {?proto.topodata.SrvKeyspace|undefined} value */
proto.vtgate.GetSrvKeyspaceResponse.prototype.setSrvKeyspace = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.vtgate.GetSrvKeyspaceResponse.prototype.clearSrvKeyspace = function() {
  this.setSrvKeyspace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vtgate.GetSrvKeyspaceResponse.prototype.hasSrvKeyspace = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.vtgate);
