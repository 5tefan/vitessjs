/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vschema.AutoIncrement', null, global);
goog.exportSymbol('proto.vschema.ColumnVindex', null, global);
goog.exportSymbol('proto.vschema.Keyspace', null, global);
goog.exportSymbol('proto.vschema.SrvVSchema', null, global);
goog.exportSymbol('proto.vschema.Table', null, global);
goog.exportSymbol('proto.vschema.Vindex', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vschema.Keyspace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vschema.Keyspace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vschema.Keyspace.displayName = 'proto.vschema.Keyspace';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vschema.Keyspace.prototype.toObject = function(opt_includeInstance) {
  return proto.vschema.Keyspace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vschema.Keyspace} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vschema.Keyspace.toObject = function(includeInstance, msg) {
  var f, obj = {
    sharded: jspb.Message.getFieldWithDefault(msg, 1, false),
    vindexesMap: (f = msg.getVindexesMap()) ? f.toArray() : [],
    tablesMap: (f = msg.getTablesMap()) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vschema.Keyspace}
 */
proto.vschema.Keyspace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vschema.Keyspace;
  return proto.vschema.Keyspace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vschema.Keyspace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vschema.Keyspace}
 */
proto.vschema.Keyspace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSharded(value);
      break;
    case 2:
      var value = msg.getVindexesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vschema.Vindex.deserializeBinaryFromReader);
         });
      break;
    case 3:
      var value = msg.getTablesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vschema.Table.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vschema.Keyspace} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.Keyspace.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vschema.Keyspace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.Keyspace.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSharded();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getVindexesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vschema.Vindex.serializeBinaryToWriter);
  }
  f = this.getTablesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vschema.Table.serializeBinaryToWriter);
  }
};


/**
 * optional bool sharded = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.vschema.Keyspace.prototype.getSharded = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.vschema.Keyspace.prototype.setSharded = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, Vindex> vindexes = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vschema.Vindex>}
 */
proto.vschema.Keyspace.prototype.getVindexesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vschema.Vindex>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.vschema.Vindex));
};


proto.vschema.Keyspace.prototype.clearVindexesMap = function() {
  this.getVindexesMap().clear();
};


/**
 * map<string, Table> tables = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vschema.Table>}
 */
proto.vschema.Keyspace.prototype.getTablesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vschema.Table>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.vschema.Table));
};


proto.vschema.Keyspace.prototype.clearTablesMap = function() {
  this.getTablesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vschema.Vindex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vschema.Vindex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vschema.Vindex.displayName = 'proto.vschema.Vindex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vschema.Vindex.prototype.toObject = function(opt_includeInstance) {
  return proto.vschema.Vindex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vschema.Vindex} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vschema.Vindex.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramsMap: (f = msg.getParamsMap()) ? f.toArray() : [],
    owner: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vschema.Vindex}
 */
proto.vschema.Vindex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vschema.Vindex;
  return proto.vschema.Vindex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vschema.Vindex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vschema.Vindex}
 */
proto.vschema.Vindex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = msg.getParamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vschema.Vindex} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.Vindex.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vschema.Vindex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.Vindex.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getParamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = this.getOwner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.vschema.Vindex.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vschema.Vindex.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * map<string, string> params = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.vschema.Vindex.prototype.getParamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


proto.vschema.Vindex.prototype.clearParamsMap = function() {
  this.getParamsMap().clear();
};


/**
 * optional string owner = 3;
 * @return {string}
 */
proto.vschema.Vindex.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.vschema.Vindex.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vschema.Table = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vschema.Table.repeatedFields_, null);
};
goog.inherits(proto.vschema.Table, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vschema.Table.displayName = 'proto.vschema.Table';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vschema.Table.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vschema.Table.prototype.toObject = function(opt_includeInstance) {
  return proto.vschema.Table.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vschema.Table} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vschema.Table.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnVindexesList: jspb.Message.toObjectList(msg.getColumnVindexesList(),
    proto.vschema.ColumnVindex.toObject, includeInstance),
    autoIncrement: (f = msg.getAutoIncrement()) && proto.vschema.AutoIncrement.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vschema.Table}
 */
proto.vschema.Table.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vschema.Table;
  return proto.vschema.Table.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vschema.Table} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vschema.Table}
 */
proto.vschema.Table.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.vschema.ColumnVindex;
      reader.readMessage(value,proto.vschema.ColumnVindex.deserializeBinaryFromReader);
      msg.addColumnVindexes(value);
      break;
    case 3:
      var value = new proto.vschema.AutoIncrement;
      reader.readMessage(value,proto.vschema.AutoIncrement.deserializeBinaryFromReader);
      msg.setAutoIncrement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vschema.Table} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.Table.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vschema.Table.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.Table.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getColumnVindexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vschema.ColumnVindex.serializeBinaryToWriter
    );
  }
  f = this.getAutoIncrement();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vschema.AutoIncrement.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.vschema.Table.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vschema.Table.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated ColumnVindex column_vindexes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.vschema.ColumnVindex>}
 */
proto.vschema.Table.prototype.getColumnVindexesList = function() {
  return /** @type{!Array.<!proto.vschema.ColumnVindex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vschema.ColumnVindex, 2));
};


/** @param {!Array.<!proto.vschema.ColumnVindex>} value */
proto.vschema.Table.prototype.setColumnVindexesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vschema.ColumnVindex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vschema.ColumnVindex}
 */
proto.vschema.Table.prototype.addColumnVindexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vschema.ColumnVindex, opt_index);
};


proto.vschema.Table.prototype.clearColumnVindexesList = function() {
  this.setColumnVindexesList([]);
};


/**
 * optional AutoIncrement auto_increment = 3;
 * @return {?proto.vschema.AutoIncrement}
 */
proto.vschema.Table.prototype.getAutoIncrement = function() {
  return /** @type{?proto.vschema.AutoIncrement} */ (
    jspb.Message.getWrapperField(this, proto.vschema.AutoIncrement, 3));
};


/** @param {?proto.vschema.AutoIncrement|undefined} value */
proto.vschema.Table.prototype.setAutoIncrement = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.vschema.Table.prototype.clearAutoIncrement = function() {
  this.setAutoIncrement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.vschema.Table.prototype.hasAutoIncrement = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vschema.ColumnVindex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vschema.ColumnVindex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vschema.ColumnVindex.displayName = 'proto.vschema.ColumnVindex';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vschema.ColumnVindex.prototype.toObject = function(opt_includeInstance) {
  return proto.vschema.ColumnVindex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vschema.ColumnVindex} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vschema.ColumnVindex.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vschema.ColumnVindex}
 */
proto.vschema.ColumnVindex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vschema.ColumnVindex;
  return proto.vschema.ColumnVindex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vschema.ColumnVindex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vschema.ColumnVindex}
 */
proto.vschema.ColumnVindex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vschema.ColumnVindex} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.ColumnVindex.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vschema.ColumnVindex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.ColumnVindex.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getColumn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string column = 1;
 * @return {string}
 */
proto.vschema.ColumnVindex.prototype.getColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vschema.ColumnVindex.prototype.setColumn = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.vschema.ColumnVindex.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vschema.ColumnVindex.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vschema.AutoIncrement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vschema.AutoIncrement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vschema.AutoIncrement.displayName = 'proto.vschema.AutoIncrement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vschema.AutoIncrement.prototype.toObject = function(opt_includeInstance) {
  return proto.vschema.AutoIncrement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vschema.AutoIncrement} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vschema.AutoIncrement.toObject = function(includeInstance, msg) {
  var f, obj = {
    column: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vschema.AutoIncrement}
 */
proto.vschema.AutoIncrement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vschema.AutoIncrement;
  return proto.vschema.AutoIncrement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vschema.AutoIncrement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vschema.AutoIncrement}
 */
proto.vschema.AutoIncrement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setColumn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vschema.AutoIncrement} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.AutoIncrement.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vschema.AutoIncrement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.AutoIncrement.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getColumn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getSequence();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string column = 1;
 * @return {string}
 */
proto.vschema.AutoIncrement.prototype.getColumn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.vschema.AutoIncrement.prototype.setColumn = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sequence = 2;
 * @return {string}
 */
proto.vschema.AutoIncrement.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.vschema.AutoIncrement.prototype.setSequence = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vschema.SrvVSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vschema.SrvVSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.vschema.SrvVSchema.displayName = 'proto.vschema.SrvVSchema';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vschema.SrvVSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.vschema.SrvVSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vschema.SrvVSchema} msg The msg instance to transform.
 * @return {!Object}
 */
proto.vschema.SrvVSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspacesMap: (f = msg.getKeyspacesMap()) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vschema.SrvVSchema}
 */
proto.vschema.SrvVSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vschema.SrvVSchema;
  return proto.vschema.SrvVSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vschema.SrvVSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vschema.SrvVSchema}
 */
proto.vschema.SrvVSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getKeyspacesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.vschema.Keyspace.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.vschema.SrvVSchema} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.SrvVSchema.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vschema.SrvVSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.vschema.SrvVSchema.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyspacesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.vschema.Keyspace.serializeBinaryToWriter);
  }
};


/**
 * map<string, Keyspace> keyspaces = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.vschema.Keyspace>}
 */
proto.vschema.SrvVSchema.prototype.getKeyspacesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.vschema.Keyspace>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.vschema.Keyspace));
};


proto.vschema.SrvVSchema.prototype.clearKeyspacesMap = function() {
  this.getKeyspacesMap().clear();
};


goog.object.extend(exports, proto.vschema);
